package xexloaderwv;

import java.util.ArrayList;

public class ImportRenamer {
	
	public static class Replacer {
		public int ordinal;
		public String name;
		public Replacer(int o, String n)
		{
			ordinal = o;
			name = n;
		}
	}
	
	public static ArrayList<Replacer> createprofile_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{			
			add(new Replacer(0x00000001, "CreateProfile_Register"));
			add(new Replacer(0x00000002, "CreateProfile_Unregister"));
		}
	};

	public static ArrayList<Replacer> connectx_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{			
			add(new Replacer(0x00000001, "CxGetVersion"));
			add(new Replacer(0x00000002, "NbtNetbios"));
			add(new Replacer(0x00000003, "SmbCloseHandle"));
			add(new Replacer(0x00000004, "SmbCreateDirectoryW"));
			add(new Replacer(0x00000005, "SmbCreateFileW"));
			add(new Replacer(0x00000006, "SmbDeleteFileW"));
			add(new Replacer(0x00000007, "SmbFindClose"));
			add(new Replacer(0x00000008, "SmbFindFirstFileW"));
			add(new Replacer(0x00000009, "SmbFindNextFile"));
			add(new Replacer(0x0000000A, "SmbFlushFileBuffers"));
			add(new Replacer(0x0000000B, "SmbGetDiskFreeSpaceW"));
			add(new Replacer(0x0000000C, "SmbGetFileAttributesW"));
			add(new Replacer(0x0000000D, "SmbGetFileInformationByHandle"));
			add(new Replacer(0x0000000E, "SmbGetFileSize"));
			add(new Replacer(0x0000000F, "SmbGetFileTime"));
			add(new Replacer(0x00000010, "SmbMoveFileW"));
			add(new Replacer(0x00000011, "SmbReadFile"));
			add(new Replacer(0x00000012, "SmbRemoveDirectoryW"));
			add(new Replacer(0x00000013, "SmbSetEndOfFile"));
			add(new Replacer(0x00000014, "SmbSetFileAttributesW"));
			add(new Replacer(0x00000015, "SmbSetFilePointer"));
			add(new Replacer(0x00000016, "SmbSetFileTime"));
			add(new Replacer(0x00000017, "SmbStartup"));
			add(new Replacer(0x00000018, "SmbWriteFile"));
		}
	};
	
	public static ArrayList<Replacer> syscall_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{
			add(new Replacer(0x00000000, "HvxGetVersions"));
			add(new Replacer(0x00000001, "HvxStartupProcessors"));
			add(new Replacer(0x00000002, "HvxQuiesceProcessor"));
			add(new Replacer(0x00000003, "HvxFlushEntireTb"));
			add(new Replacer(0x00000004, "HvxFlushSingleTb"));
			add(new Replacer(0x00000005, "HvxRelocateAndFlush"));
			add(new Replacer(0x00000006, "HvxGetSpecialPurposeRegister"));
			add(new Replacer(0x00000007, "HvxSetSpecialPurposeRegister"));
			add(new Replacer(0x00000008, "HvxGetSocRegister"));
			add(new Replacer(0x00000009, "HvxSetSocRegister"));
			add(new Replacer(0x0000000A, "HvxSetTimeBaseToZero"));
			add(new Replacer(0x0000000B, "HvxZeroPage"));
			add(new Replacer(0x0000000C, "HvxFlushDcacheRange"));
			add(new Replacer(0x0000000D, "HvxPostOutput"));
			add(new Replacer(0x0000000E, "HvxEnablePPUPerformanceMonitor"));
			add(new Replacer(0x0000000F, "HvxGetImagePageTableEntry"));
			add(new Replacer(0x00000010, "HvxSetImagePageTableEntry"));
			add(new Replacer(0x00000011, "HvxCreateImageMapping"));
			add(new Replacer(0x00000012, "HvxMapImagePage"));
			add(new Replacer(0x00000013, "HvxCompleteImageMapping"));
			add(new Replacer(0x00000014, "HvxLoadImageData"));
			add(new Replacer(0x00000015, "HvxFinishImageDataLoad"));
			add(new Replacer(0x00000016, "HvxStartResolveImports"));
			add(new Replacer(0x00000017, "HvxResolveImports"));
			add(new Replacer(0x00000018, "HvxFinishImageLoad"));
			add(new Replacer(0x00000019, "HvxAbandonImageLoad"));
			add(new Replacer(0x0000001A, "HvxUnmapImagePages"));
			add(new Replacer(0x0000001B, "HvxUnmapImage"));
			add(new Replacer(0x0000001C, "HvxUnmapImageRange"));
			add(new Replacer(0x0000001D, "HvxCreateUserMode"));
			add(new Replacer(0x0000001E, "HvxDeleteUserMode"));
			add(new Replacer(0x0000001F, "HvxFlushUserModeTb"));
			add(new Replacer(0x00000020, "HvxSetPowerMode"));
			add(new Replacer(0x00000021, "HvxShadowBoot"));
			add(new Replacer(0x00000022, "HvxBlowFuses"));
			add(new Replacer(0x00000023, "HvxFsbInterrupt"));
			add(new Replacer(0x00000024, "HvxLockL2"));
			add(new Replacer(0x00000025, "HvxDvdAuthBuildNVPage"));
			add(new Replacer(0x00000026, "HvxDvdAuthVerifyNVPage"));
			add(new Replacer(0x00000027, "HvxDvdAuthRecordAuthenticationPage"));
			add(new Replacer(0x00000028, "HvxDvdAuthRecordXControl"));
			add(new Replacer(0x00000029, "HvxDvdAuthGetAuthPage"));
			add(new Replacer(0x0000002A, "HvxDvdAuthVerifyAuthPage"));
			add(new Replacer(0x0000002B, "HvxDvdAuthGetNextLBAIndex"));
			add(new Replacer(0x0000002C, "HvxDvdAuthVerifyLBA"));
			add(new Replacer(0x0000002D, "HvxDvdAuthClearDiscAuthInfo"));
			add(new Replacer(0x0000002E, "HvxKeysInitialize"));
			add(new Replacer(0x0000002F, "HvxKeysGetKeyProperties"));
			add(new Replacer(0x00000030, "HvxKeysGetStatus"));
			add(new Replacer(0x00000031, "HvxKeysGenerateRandomKey"));
			add(new Replacer(0x00000032, "HvxKeysGetFactoryChallenge"));
			add(new Replacer(0x00000033, "HvxKeysSetFactoryResponse"));
			add(new Replacer(0x00000034, "HvxKeysSaveBootLoader"));
			add(new Replacer(0x00000035, "HvxKeysSaveKeyVault"));
			add(new Replacer(0x00000036, "HvxKeysSetKey"));
			add(new Replacer(0x00000037, "HvxKeysGetKey"));
			add(new Replacer(0x00000038, "HvxKeysGetDigest"));
			add(new Replacer(0x00000039, "HvxKeysRsaPrvCrypt"));
			add(new Replacer(0x0000003A, "HvxKeysHmacSha"));
			add(new Replacer(0x0000003B, "HvxKeysAesCbc"));
			add(new Replacer(0x0000003C, "HvxKeysDes2Cbc"));
			add(new Replacer(0x0000003D, "HvxKeysDesCbc"));
			add(new Replacer(0x0000003E, "HvxKeysObscureKey"));
			add(new Replacer(0x0000003F, "HvxKeysSaveSystemUpdate"));
			add(new Replacer(0x00000040, "HvxKeysExecute"));
			add(new Replacer(0x00000041, "HvxDvdAuthTestMode"));
			add(new Replacer(0x00000042, "HvxEnableTimebase"));
			add(new Replacer(0x00000043, "HvxHdcpCalculateMi"));
			add(new Replacer(0x00000044, "HvxHdcpCalculateAKsvSignature"));
			add(new Replacer(0x00000045, "HvxHdcpCalculateBKsvSignature"));
			add(new Replacer(0x00000046, "HvxSetRevocationList"));
			add(new Replacer(0x00000047, "HvxEncryptedReserveAllocation"));
			add(new Replacer(0x00000048, "HvxEncryptedReleaseAllocation"));
			add(new Replacer(0x00000049, "HvxEncryptedEncryptAllocation"));
			add(new Replacer(0x0000004A, "HvxEncryptedSweepAddressRange"));
			add(new Replacer(0x0000004B, "HvxKeysExCreateKeyVault"));
			add(new Replacer(0x0000004C, "HvxKeysExLoadKeyVault"));
			add(new Replacer(0x0000004D, "HvxKeysExSaveKeyVault"));
			add(new Replacer(0x0000004E, "HvxKeysExSetKey"));
			add(new Replacer(0x0000004F, "HvxKeysExGetKey"));
			add(new Replacer(0x00000050, "HvxGetUpdateSequence"));
			add(new Replacer(0x00000051, "HvxSecurityInitialize"));
			add(new Replacer(0x00000052, "HvxSecurityLoadSettings"));
			add(new Replacer(0x00000053, "HvxSecuritySaveSettings"));
			add(new Replacer(0x00000054, "HvxSecuritySetDetected"));
			add(new Replacer(0x00000055, "HvxSecurityGetDetected"));
			add(new Replacer(0x00000056, "HvxSecuritySetActivated"));
			add(new Replacer(0x00000057, "HvxSecurityGetActivated"));
			add(new Replacer(0x00000058, "HvxSecuritySetStat"));
			add(new Replacer(0x00000059, "HvxGetProtectedFlags"));
			add(new Replacer(0x0000005A, "HvxSetProtectedFlag"));
			add(new Replacer(0x0000005B, "HvxDvdAuthGetAuthResults"));
			add(new Replacer(0x0000005C, "HvxDvdAuthSetDriveAuthResult"));
			add(new Replacer(0x0000005D, "HvxDvdAuthSetDiscAuthResult"));
			add(new Replacer(0x0000005E, "HvxImageTransformImageKey"));
			add(new Replacer(0x0000005F, "HvxImageXexHeader"));
			add(new Replacer(0x00000060, "HvxRevokeLoad"));
			add(new Replacer(0x00000061, "HvxRevokeSave"));
			add(new Replacer(0x00000062, "HvxRevokeUpdate"));
			add(new Replacer(0x00000063, "HvxDvdAuthGetMediaId"));
			add(new Replacer(0x00000064, "HvxKeysLoadKeyVault"));
			add(new Replacer(0x00000065, "HvxXexActivationGetNonce"));
			add(new Replacer(0x00000066, "HvxXexActivationSetLicense"));
			add(new Replacer(0x00000067, "HvxXexActivationVerifyOwnership"));
			add(new Replacer(0x00000068, "HvxIptvSetBoundaryKey"));
			add(new Replacer(0x00000069, "HvxIptvSetSessionKey"));
			add(new Replacer(0x0000006A, "HvxIptvVerifyOmac1Signature"));
			add(new Replacer(0x0000006B, "HvxIptvGetAesCtrTransform"));
			add(new Replacer(0x0000006C, "HvxIptvGetSessionKeyHash"));
			add(new Replacer(0x0000006D, "HvxImageDvdEmulationMode"));
			add(new Replacer(0x0000006E, "HvxImageUserMode"));
			add(new Replacer(0x0000006F, "HvxImageShim"));
			add(new Replacer(0x00000070, "HvxExpansionInstall"));
			add(new Replacer(0x00000071, "HvxExpansionCall"));
			add(new Replacer(0x00000072, "HvxDvdAuthFwcr"));
			add(new Replacer(0x00000073, "HvxDvdAuthFcrt"));
			add(new Replacer(0x00000074, "HvxDvdAuthEx"));
			add(new Replacer(0x00000075, "HvxTest"));
		}
	};
		
	public static ArrayList<Replacer> vk_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{						
			add(new Replacer(0x00000001, "RegisterXuiClasses"));
			add(new Replacer(0x00000002, "VK_UnInit"));
			add(new Replacer(0x00000003, "VK_CreateScene"));
			add(new Replacer(0x00000004, "VK_GetUserCancelled"));
		}
	};
	
	public static ArrayList<Replacer> xam_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{
			add(new Replacer(0x00000001, "NetDll_WSAStartup"));
			add(new Replacer(0x00000002, "NetDll_WSACleanup"));
			add(new Replacer(0x00000003, "NetDll_socket"));
			add(new Replacer(0x00000004, "NetDll_closesocket"));
			add(new Replacer(0x00000005, "NetDll_shutdown"));
			add(new Replacer(0x00000006, "NetDll_ioctlsocket"));
			add(new Replacer(0x00000007, "NetDll_setsockopt"));
			add(new Replacer(0x00000008, "NetDll_getsockopt"));
			add(new Replacer(0x00000009, "NetDll_getsockname"));
			add(new Replacer(0x0000000A, "NetDll_getpeername"));
			add(new Replacer(0x0000000B, "NetDll_bind"));
			add(new Replacer(0x0000000C, "NetDll_connect"));
			add(new Replacer(0x0000000D, "NetDll_listen"));
			add(new Replacer(0x0000000E, "NetDll_accept"));
			add(new Replacer(0x0000000F, "NetDll_select"));
			add(new Replacer(0x00000010, "NetDll_WSAGetOverlappedResult"));
			add(new Replacer(0x00000011, "NetDll_WSACancelOverlappedIO"));
			add(new Replacer(0x00000012, "NetDll_recv"));
			add(new Replacer(0x00000013, "NetDll_WSARecv"));
			add(new Replacer(0x00000014, "NetDll_recvfrom"));
			add(new Replacer(0x00000015, "NetDll_WSARecvFrom"));
			add(new Replacer(0x00000016, "NetDll_send"));
			add(new Replacer(0x00000017, "NetDll_WSASend"));
			add(new Replacer(0x00000018, "NetDll_sendto"));
			add(new Replacer(0x00000019, "NetDll_WSASendTo"));
			add(new Replacer(0x0000001A, "NetDll_inet_addr"));
			add(new Replacer(0x0000001B, "NetDll_WSAGetLastError"));
			add(new Replacer(0x0000001C, "NetDll_WSASetLastError"));
			add(new Replacer(0x0000001D, "NetDll_WSACreateEvent"));
			add(new Replacer(0x0000001E, "NetDll_WSACloseEvent"));
			add(new Replacer(0x0000001F, "NetDll_WSASetEvent"));
			add(new Replacer(0x00000020, "NetDll_WSAResetEvent"));
			add(new Replacer(0x00000021, "NetDll_WSAWaitForMultipleEvents"));
			add(new Replacer(0x00000022, "NetDll___WSAFDIsSet"));
			add(new Replacer(0x00000023, "NetDll_WSAEventSelect"));
			add(new Replacer(0x00000024, "NetDll_WSAStartupEx"));
			add(new Replacer(0x00000033, "NetDll_XNetStartup"));
			add(new Replacer(0x00000034, "NetDll_XNetCleanup"));
			add(new Replacer(0x00000035, "NetDll_XNetRandom"));
			add(new Replacer(0x00000036, "NetDll_XNetCreateKey"));
			add(new Replacer(0x00000037, "NetDll_XNetRegisterKey"));
			add(new Replacer(0x00000038, "NetDll_XNetUnregisterKey"));
			add(new Replacer(0x00000039, "NetDll_XNetXnAddrToInAddr"));
			add(new Replacer(0x0000003A, "NetDll_XNetServerToInAddr"));
			add(new Replacer(0x0000003B, "NetDll_XNetTsAddrToInAddr"));
			add(new Replacer(0x0000003C, "NetDll_XNetInAddrToXnAddr"));
			add(new Replacer(0x0000003D, "NetDll_XNetInAddrToServer"));
			add(new Replacer(0x0000003E, "NetDll_XNetInAddrToString"));
			add(new Replacer(0x0000003F, "NetDll_XNetUnregisterInAddr"));
			add(new Replacer(0x00000040, "NetDll_XNetXnAddrToMachineId"));
			add(new Replacer(0x00000041, "NetDll_XNetConnect"));
			add(new Replacer(0x00000042, "NetDll_XNetGetConnectStatus"));
			add(new Replacer(0x00000043, "NetDll_XNetDnsLookup"));
			add(new Replacer(0x00000044, "NetDll_XNetDnsRelease"));
			add(new Replacer(0x00000045, "NetDll_XNetQosListen"));
			add(new Replacer(0x00000046, "NetDll_XNetQosLookup"));
			add(new Replacer(0x00000047, "NetDll_XNetQosServiceLookup"));
			add(new Replacer(0x00000048, "NetDll_XNetQosRelease"));
			add(new Replacer(0x00000049, "NetDll_XNetGetTitleXnAddr"));
			add(new Replacer(0x0000004A, "NetDll_XNetGetDebugXnAddr"));
			add(new Replacer(0x0000004B, "NetDll_XNetGetEthernetLinkStatus"));
			add(new Replacer(0x0000004C, "NetDll_XNetGetBroadcastVersionStatus"));
			add(new Replacer(0x0000004D, "NetDll_XNetQosGetListenStats"));
			add(new Replacer(0x0000004E, "NetDll_XNetGetOpt"));
			add(new Replacer(0x0000004F, "NetDll_XNetSetOpt"));
			add(new Replacer(0x00000050, "NetDll_XNetStartupEx"));
			add(new Replacer(0x00000051, "NetDll_XNetReplaceKey"));
			add(new Replacer(0x00000052, "NetDll_XNetGetXnAddrPlatform"));
			add(new Replacer(0x00000053, "NetDll_XNetGetSystemLinkPort"));
			add(new Replacer(0x00000054, "NetDll_XNetSetSystemLinkPort"));
			add(new Replacer(0x00000065, "NetDll_XnpLoadConfigParams"));
			add(new Replacer(0x00000066, "NetDll_XnpSaveConfigParams"));
			add(new Replacer(0x00000067, "NetDll_XnpConfigUPnP"));
			add(new Replacer(0x00000068, "NetDll_XnpConfig"));
			add(new Replacer(0x00000069, "NetDll_XnpGetConfigStatus"));
			add(new Replacer(0x0000006A, "NetDll_XnpLoadMachineAccount"));
			add(new Replacer(0x0000006B, "NetDll_XnpSaveMachineAccount"));
			add(new Replacer(0x0000006C, "NetDll_XnpCapture"));
			add(new Replacer(0x0000006D, "NetDll_XnpEthernetInterceptSetCallbacks"));
			add(new Replacer(0x0000006E, "NetDll_XnpEthernetInterceptXmit"));
			add(new Replacer(0x0000006F, "NetDll_XnpEthernetInterceptRecv"));
			add(new Replacer(0x00000070, "NetDll_XnpLogonGetStatus"));
			add(new Replacer(0x00000071, "NetDll_XnpLogonGetQFlags"));
			add(new Replacer(0x00000072, "NetDll_XnpLogonSetQFlags"));
			add(new Replacer(0x00000073, "NetDll_XnpLogonSetQEvent"));
			add(new Replacer(0x00000074, "NetDll_XnpLogonClearQEvent"));
			add(new Replacer(0x00000075, "NetDll_XnpLogonGetQVals"));
			add(new Replacer(0x00000076, "NetDll_XnpLogonSetQVals"));
			add(new Replacer(0x00000077, "NetDll_XnpLogonSetPState"));
			add(new Replacer(0x00000078, "NetDll_XnpGetVlanXboxName"));
			add(new Replacer(0x00000079, "NetDll_XnpSetVlanXboxName"));
			add(new Replacer(0x0000007A, "NetDll_XnpGetActiveSocketList"));
			add(new Replacer(0x0000007B, "NetDll_XnpNoteSystemTime"));
			add(new Replacer(0x0000007C, "NetDll_XnpRegisterKeyForCallerType"));
			add(new Replacer(0x0000007D, "NetDll_XnpUnregisterKeyForCallerType"));
			add(new Replacer(0x0000007E, "NetDll_XnpLogonGetChallenge"));
			add(new Replacer(0x0000007F, "NetDll_XnpLogonClearChallenge"));
			add(new Replacer(0x00000080, "NetDll_XnpLogonSetChallengeResponse"));
			add(new Replacer(0x00000081, "NetDll_XnpGetSecAssocList"));
			add(new Replacer(0x00000082, "NetDll_XnpGetKeyList"));
			add(new Replacer(0x00000083, "NetDll_XnpGetQosLookupList"));
			add(new Replacer(0x00000084, "NetDll_XnpPersistTitleState"));
			add(new Replacer(0x00000085, "NetDll_XnpReplaceKeyForCallerType"));
			add(new Replacer(0x00000086, "NetDll_XnpEthernetInterceptSetExtendedReceiveCallback"));
			add(new Replacer(0x00000087, "NetDll_XnpQosHistoryLoad"));
			add(new Replacer(0x00000088, "NetDll_XnpQosHistorySaveMeasurements"));
			add(new Replacer(0x00000089, "NetDll_XnpQosHistoryGetEntries"));
			add(new Replacer(0x0000008A, "NetDll_XnpQosHistoryGetAggregateMeasurement"));
			add(new Replacer(0x0000008B, "NetDll_XnpToolSetCallbacks"));
			add(new Replacer(0x0000008C, "NetDll_XnpToolIpProxyInject"));
			add(new Replacer(0x0000008D, "NetDll_XnpUpdateConfigParams"));
			add(new Replacer(0x0000008E, "NetDll_XnpEthernetInterceptXmitAsIp"));
			add(new Replacer(0x00000097, "NetDll_XmlDownloadStart"));
			add(new Replacer(0x00000098, "NetDll_XmlDownloadContinue"));
			add(new Replacer(0x00000099, "NetDll_XmlDownloadStop"));
			add(new Replacer(0x0000009A, "NetDll_XmlDownloadGetParseTime"));
			add(new Replacer(0x0000009B, "NetDll_XmlDownloadGetReceivedDataSize"));
			add(new Replacer(0x000000C6, "XnpGetXwppMemoryLogSnapshot"));
			add(new Replacer(0x000000C7, "XnpGetXwppRuntimeFilter"));
			add(new Replacer(0x000000C9, "NetDll_XHttpStartup"));
			add(new Replacer(0x000000CA, "NetDll_XHttpShutdown"));
			add(new Replacer(0x000000CB, "NetDll_XHttpOpen"));
			add(new Replacer(0x000000CC, "NetDll_XHttpCloseHandle"));
			add(new Replacer(0x000000CD, "NetDll_XHttpConnect"));
			add(new Replacer(0x000000CE, "NetDll_XHttpSetStatusCallback"));
			add(new Replacer(0x000000CF, "NetDll_XHttpOpenRequest"));
			add(new Replacer(0x000000D0, "NetDll_XHttpOpenRequestUsingMemory"));
			add(new Replacer(0x000000D1, "NetDll_XHttpSendRequest"));
			add(new Replacer(0x000000D2, "NetDll_XHttpReceiveResponse"));
			add(new Replacer(0x000000D3, "NetDll_XHttpQueryHeaders"));
			add(new Replacer(0x000000D4, "NetDll_XHttpReadData"));
			add(new Replacer(0x000000D5, "NetDll_XHttpWriteData"));
			add(new Replacer(0x000000D6, "NetDll_XHttpQueryOption"));
			add(new Replacer(0x000000D7, "NetDll_XHttpSetOption"));
			add(new Replacer(0x000000D8, "NetDll_XHttpDoWork"));
			add(new Replacer(0x000000D9, "NetDll_XHttpSetCredentials"));
			add(new Replacer(0x000000DA, "NetDll_XHttpQueryAuthSchemes"));
			add(new Replacer(0x000000DB, "NetDll_XHttpCrackUrl"));
			add(new Replacer(0x000000FB, "NetDll_UpnpStartup"));
			add(new Replacer(0x000000FC, "NetDll_UpnpCleanup"));
			add(new Replacer(0x000000FD, "NetDll_UpnpSearchCreate"));
			add(new Replacer(0x000000FE, "NetDll_UpnpSearchGetDevices"));
			add(new Replacer(0x000000FF, "NetDll_UpnpDescribeCreate"));
			add(new Replacer(0x00000100, "NetDll_UpnpDescribeGetResults"));
			add(new Replacer(0x00000101, "NetDll_UpnpActionCalculateWorkBufferSize"));
			add(new Replacer(0x00000102, "NetDll_UpnpActionCreate"));
			add(new Replacer(0x00000103, "NetDll_UpnpActionGetResults"));
			add(new Replacer(0x00000104, "NetDll_UpnpEventCreate"));
			add(new Replacer(0x00000105, "NetDll_UpnpEventGetCurrentState"));
			add(new Replacer(0x00000106, "NetDll_UpnpEventUnsubscribe"));
			add(new Replacer(0x00000107, "NetDll_UpnpDoWork"));
			add(new Replacer(0x00000108, "NetDll_UpnpCloseHandle"));
			add(new Replacer(0x0000012D, "XNetLogonGetLoggedOnUsers"));
			add(new Replacer(0x0000012E, "XNetLogonGetNatType"));
			add(new Replacer(0x0000012F, "XNetLogonTaskStart"));
			add(new Replacer(0x00000130, "XNetLogonTaskClose"));
			add(new Replacer(0x00000131, "XNetLogonTaskContinue"));
			add(new Replacer(0x00000132, "XNetLogonGetServiceInfo"));
			add(new Replacer(0x00000133, "XNetLogonGetUserPrivileges"));
			add(new Replacer(0x00000134, "XNetLogonSetConsoleCertificate"));
			add(new Replacer(0x00000135, "XNetLogonGetMachineID"));
			add(new Replacer(0x00000136, "XNetLogonGetTitleID"));
			add(new Replacer(0x00000137, "XNetLogonGetTitleVersion"));
			add(new Replacer(0x00000138, "XNetLogonGetServiceNetworkID"));
			add(new Replacer(0x00000139, "XNetLogonGetDnsString"));
			add(new Replacer(0x0000013A, "XNetLogonSetTitleID"));
			add(new Replacer(0x0000013B, "XNetLogonGetExtendedStatus"));
			add(new Replacer(0x0000013C, "XNetLogonClearTicketCaches"));
			add(new Replacer(0x0000013D, "XNetLogonInitOverrideInfo"));
			add(new Replacer(0x0000013E, "XNetLogonGetLastUPnPStatus"));
			add(new Replacer(0x0000013F, "XNetLogonGetFlowToken"));
			add(new Replacer(0x00000140, "XNetLogonGetTicketOpt"));
			add(new Replacer(0x00000141, "XNetLogonSetTicketOpt"));
			add(new Replacer(0x00000190, "XamInputGetCapabilities"));
			add(new Replacer(0x00000191, "XamInputGetState"));
			add(new Replacer(0x00000192, "XamInputSetState"));
			add(new Replacer(0x00000193, "XamInputGetKeystroke"));
			add(new Replacer(0x00000194, "XamInputEnableAutobind"));
			add(new Replacer(0x00000195, "XamInputRawState"));
			add(new Replacer(0x00000196, "XamEnableSystemAppInput"));
			add(new Replacer(0x00000197, "XamInputGetDeviceStats"));
			add(new Replacer(0x00000198, "XamInputGetKeystrokeEx"));
			add(new Replacer(0x00000199, "XamInputGetKeystrokeHud"));
			add(new Replacer(0x0000019A, "XamInputSetLayoutKeyboard"));
			add(new Replacer(0x0000019B, "XamInputToggleKeyLocks"));
			add(new Replacer(0x0000019C, "XamInputResetLayoutKeyboard"));
			add(new Replacer(0x0000019D, "XamInputGetKeystrokeHudEx"));
			add(new Replacer(0x0000019E, "XamInputSetKeyboardTranslationHud"));
			add(new Replacer(0x0000019F, "XamSetInactivityTime"));
			add(new Replacer(0x000001A0, "XamEnableInactivityProcessing"));
			add(new Replacer(0x000001A1, "XamResetInactivity"));
			add(new Replacer(0x000001A2, "XamSetInactivityTimeFromConfig"));
			add(new Replacer(0x000001A3, "XamLoaderGetMediaInfo"));
			add(new Replacer(0x000001A4, "XamLoaderLaunchTitle"));
			add(new Replacer(0x000001A5, "XamLoaderLaunchTitleEx"));
			add(new Replacer(0x000001A6, "XamLoaderSetLaunchData"));
			add(new Replacer(0x000001A7, "XamLoaderGetLaunchDataSize"));
			add(new Replacer(0x000001A8, "XamLoaderGetLaunchData"));
			add(new Replacer(0x000001A9, "XamLoaderTerminateTitle"));
			add(new Replacer(0x000001AA, "XamLoaderGetDvdTrayState"));
			add(new Replacer(0x000001AB, "XamLoaderGetGameInfo"));
			add(new Replacer(0x000001AC, "XamLoaderLaunchTitleOnDvd"));
			add(new Replacer(0x000001AD, "XamLoaderSetSpindleSpeed"));
			add(new Replacer(0x000001AE, "XamTaskCreateQueue"));
			add(new Replacer(0x000001AF, "XamTaskSchedule"));
			add(new Replacer(0x000001B0, "XamTaskReschedule"));
			add(new Replacer(0x000001B1, "XamTaskCloseHandle"));
			add(new Replacer(0x000001B2, "XamTaskCancel"));
			add(new Replacer(0x000001B3, "XamTaskShouldExit"));
			add(new Replacer(0x000001B4, "XamTaskWaitOnCompletion"));
			add(new Replacer(0x000001B5, "XamTaskModify"));
			add(new Replacer(0x000001B6, "XamTaskGetCurrentTask"));
			add(new Replacer(0x000001B7, "XamTaskGetAttributes"));
			add(new Replacer(0x000001B8, "XamExecutingOnBehalfOfTitle"));
			add(new Replacer(0x000001B9, "XamInputSendStayAliveRequest"));
			add(new Replacer(0x000001BA, "XamInputGetUserVibrationLevel"));
			add(new Replacer(0x000001BB, "XamIsSystemTitleId"));
			add(new Replacer(0x000001BC, "XamLoaderIsTitleTerminatePending"));
			add(new Replacer(0x000001BD, "XamInputSetTextMessengerIndicator"));
			add(new Replacer(0x000001BE, "XamLoaderGetPriorTitleId"));
			add(new Replacer(0x000001BF, "XamIsXbox1TitleId"));
			add(new Replacer(0x000001C0, "XamInputSetKeyLocks"));
			add(new Replacer(0x000001C1, "XamInputGetKeyLocks"));
			add(new Replacer(0x000001C2, "XamTaskGetStatus"));
			add(new Replacer(0x000001C3, "XamGetRootObj"));
			add(new Replacer(0x000001C4, "XamDevAuthSetFault"));
			add(new Replacer(0x000001C5, "XamGetDefaultSystemImage"));
			add(new Replacer(0x000001C6, "XamGetWCNConfigFile"));
			add(new Replacer(0x000001C7, "XamSetPowerMode"));
			add(new Replacer(0x000001C8, "XamExecuteChallenge"));
			add(new Replacer(0x000001C9, "XamGetDefaultImage"));
			add(new Replacer(0x000001CA, "XamMuteSound"));
			add(new Replacer(0x000001CB, "XamGetOnlineSchema"));
			add(new Replacer(0x000001CC, "XamSetDashContext"));
			add(new Replacer(0x000001CD, "XamGetDashContext"));
			add(new Replacer(0x000001CE, "XamIsCurrentTitleDash"));
			add(new Replacer(0x000001CF, "XamGetCurrentTitleId"));
			add(new Replacer(0x000001D0, "XamSetCurrentTitleDash"));
			add(new Replacer(0x000001D1, "XamAllocHeapFreeSpace"));
			add(new Replacer(0x000001D2, "XamSetDashContextEx"));
			add(new Replacer(0x000001D3, "XamGetDashContextEx"));
			add(new Replacer(0x000001D4, "XamSetHudContext"));
			add(new Replacer(0x000001D5, "XamGetHudContext"));
			add(new Replacer(0x000001D6, "XCustomGetBannerImage"));
			add(new Replacer(0x000001D7, "Refresh"));
			add(new Replacer(0x000001D8, "XCustomSetAction"));
			add(new Replacer(0x000001D9, "XCustomGetLastActionPress"));
			add(new Replacer(0x000001DA, "XCustomSetDynamicActions"));
			add(new Replacer(0x000001DB, "XCustomBroadcastActionEvent"));
			add(new Replacer(0x000001DC, "XCustomGetLastActionPressEx"));
			add(new Replacer(0x000001DD, "XCustomRegisterDynamicActions"));
			add(new Replacer(0x000001DE, "XCustomUnregisterDynamicActions"));
			add(new Replacer(0x000001DF, "XCustomGetCurrentGamercard"));
			add(new Replacer(0x000001E0, "XamDbgPrint"));
			add(new Replacer(0x000001E1, "XamDbgSetOutputLevel"));
			add(new Replacer(0x000001E2, "XamDbgSetBreakLevel"));
			add(new Replacer(0x000001E3, "XamLoaderGetMediaInfoEx"));
			add(new Replacer(0x000001E4, "XamLoaderSetGameInfo"));
			add(new Replacer(0x000001E5, "XamFormatMessage"));
			add(new Replacer(0x000001E6, "XamUniSortCmpString"));
			add(new Replacer(0x000001E7, "XamFormatTimeString"));
			add(new Replacer(0x000001E8, "XamFormatDateString"));
			add(new Replacer(0x000001E9, "XamGetLocaleDateFormat"));
			add(new Replacer(0x000001EA, "XamAlloc"));
			add(new Replacer(0x000001EB, "XamAllocEx"));
			add(new Replacer(0x000001EC, "XamFree"));
			add(new Replacer(0x000001ED, "XamAllocSize"));
			add(new Replacer(0x000001EE, "XamAllocMountIPTVHeap"));
			add(new Replacer(0x000001EF, "XamAllocUnmountIPTVHeap"));
			add(new Replacer(0x000001F0, "XamAllocFreeIPTVHeap"));
			add(new Replacer(0x000001F1, "XamDeviceRemap"));
			add(new Replacer(0x000001F2, "XamLoaderGetClearCache"));
			add(new Replacer(0x000001F3, "XamLoaderSetClearCache"));
			add(new Replacer(0x000001F4, "XMsgInProcessCall"));
			add(new Replacer(0x000001F5, "XMsgCompleteIORequest"));
			add(new Replacer(0x000001F6, "XMsgSystemProcessCall"));
			add(new Replacer(0x000001F7, "XMsgStartIORequest"));
			add(new Replacer(0x000001F8, "XMsgCancelIORequest"));
			add(new Replacer(0x000001F9, "XMsgAcquireAsyncMessageFromOverlapped"));
			add(new Replacer(0x000001FA, "XMsgReleaseAsyncMessageToOverlapped"));
			add(new Replacer(0x000001FB, "XamGetOverlappedResult"));
			add(new Replacer(0x000001FC, "XMsgStartIORequestEx"));
			add(new Replacer(0x000001FD, "XamAppAllocateInterappWorkspace"));
			add(new Replacer(0x000001FE, "XamAppGetInterappWorkspace"));
			add(new Replacer(0x000001FF, "XamAppFreeInterappWorkspace"));
			add(new Replacer(0x00000200, "XamFeatureEnabled"));
			add(new Replacer(0x00000201, "XamFeatureEnforceImageBudget"));
			add(new Replacer(0x00000202, "XamFeatureSetMask"));
			add(new Replacer(0x00000203, "XamFeatureEnableDisable"));
			add(new Replacer(0x00000204, "XuiControlSetItemAssociation"));
			add(new Replacer(0x00000205, "XamGetTitleGlobalStorageValue"));
			add(new Replacer(0x00000206, "XamSetTitleGlobalStorageValue"));
			add(new Replacer(0x00000207, "XamUserValidateAvatarManifest"));
			add(new Replacer(0x00000208, "XamUserGetDeviceContext"));
			add(new Replacer(0x00000209, "XamUserLookupDevice"));
			add(new Replacer(0x0000020A, "XamUserGetXUID"));
			add(new Replacer(0x0000020B, "XamUserLogon"));
			add(new Replacer(0x0000020C, "XamUserGetGamerTag"));
			add(new Replacer(0x0000020D, "XamUserGetUserIndexMask"));
			add(new Replacer(0x0000020E, "XamUserGetName"));
			add(new Replacer(0x0000020F, "XamLookupCommonStringByIndex"));
			add(new Replacer(0x00000210, "XamUserGetSigninState"));
			add(new Replacer(0x00000211, "XamUserGetIndexFromXUID"));
			add(new Replacer(0x00000212, "XamUserCheckPrivilege"));
			add(new Replacer(0x00000213, "XamUserAreUsersFriends"));
			add(new Replacer(0x00000214, "XamSetUserPresetPresenceState"));
			add(new Replacer(0x00000215, "XamGetUserPresetPresenceState"));
			add(new Replacer(0x00000216, "XamUserGetUserFlagsFromXUID"));
			add(new Replacer(0x00000217, "XamUserGetMembershipTierFromXUID"));
			add(new Replacer(0x00000218, "XamUserGetOnlineCountryFromXUID"));
			add(new Replacer(0x00000219, "XamUserReadProfileSettings"));
			add(new Replacer(0x0000021A, "XamUserWriteProfileSettings"));
			add(new Replacer(0x0000021B, "XamUserGetMembershipTier"));
			add(new Replacer(0x0000021C, "XamUserGetUserFlags"));
			add(new Replacer(0x0000021D, "XamUserGetRequestedUserIndexMask"));
			add(new Replacer(0x0000021E, "XamUserIsGuest"));
			add(new Replacer(0x0000021F, "XamUserProfileSync"));
			add(new Replacer(0x00000220, "XamUserFlushLogonQueue"));
			add(new Replacer(0x00000221, "XamUserIsOnlineEnabled"));
			add(new Replacer(0x00000222, "XamUserGetCachedUserFlags"));
			add(new Replacer(0x00000223, "XamAreMixedAccountsSignedIn"));
			add(new Replacer(0x00000224, "XamUserLogonEx"));
			add(new Replacer(0x00000225, "XamSetUserShowMessengerFriends"));
			add(new Replacer(0x00000226, "XamGetUserShowMessengerFriends"));
			add(new Replacer(0x00000227, "XamUserGetSigninInfo"));
			add(new Replacer(0x00000228, "XamUserIsPartial"));
			add(new Replacer(0x00000229, "XamUserGetOnlineLanguageFromXUID"));
			add(new Replacer(0x0000022A, "XamUserReadProfileSettingsEx"));
			add(new Replacer(0x0000022B, "XamSystemUpdaterLogon"));
			add(new Replacer(0x0000022C, "XamUserGetUsersMissingAvatars"));
			add(new Replacer(0x0000022D, "XamIsChildAccountSignedIn"));
			add(new Replacer(0x0000022E, "XamUserPrefetchProfileSettings"));
			add(new Replacer(0x0000022F, "XamUserInvalidateProfileSetting"));
			add(new Replacer(0x00000230, "XamProfileCreate"));
			add(new Replacer(0x00000231, "XamProfileCreateEnumerator"));
			add(new Replacer(0x00000232, "XamProfileEnumerate"));
			add(new Replacer(0x00000233, "XamProfileDelete"));
			add(new Replacer(0x00000234, "XamProfileGetCreationStatus"));
			add(new Replacer(0x00000235, "XamProfileFindAccount"));
			add(new Replacer(0x00000236, "XamProfileRenameAccount"));
			add(new Replacer(0x00000237, "XamProfileOpen"));
			add(new Replacer(0x00000238, "XamProfileClose"));
			add(new Replacer(0x00000239, "XamProfileSaveAccountInfo"));
			add(new Replacer(0x0000023A, "XamProfileLoadAccountInfo"));
			add(new Replacer(0x0000023B, "XamProfileRecoverTitle"));
			add(new Replacer(0x0000023C, "XamProfileSaveWindowsLiveCredentials"));
			add(new Replacer(0x0000023D, "XamProfileLoadWindowsLiveCredentials"));
			add(new Replacer(0x0000023E, "XamProfileIsSaveWindowsLiveCredsEnabled"));
			add(new Replacer(0x0000023F, "XamProfileSetSaveWindowsLiveCredsEnabled"));
			add(new Replacer(0x00000240, "XamSetProfileReadTestHook"));
			add(new Replacer(0x00000241, "XamProfileGetLastSync"));
			add(new Replacer(0x00000242, "XamAccountRecoveryRecoverTitle"));
			add(new Replacer(0x00000243, "XamProfileControlPec"));
			add(new Replacer(0x00000244, "XamAppLoad"));
			add(new Replacer(0x00000245, "XamAppUnloadSelf"));
			add(new Replacer(0x00000246, "XamAppUnloadStack"));
			add(new Replacer(0x00000247, "XamSendMessageToLoadedApps"));
			add(new Replacer(0x00000248, "XamAppRequestLoad"));
			add(new Replacer(0x00000249, "XamAppUnrequestLoad"));
			add(new Replacer(0x0000024A, "XamNavigate"));
			add(new Replacer(0x0000024B, "XamRegisterSysApp"));
			add(new Replacer(0x0000024C, "XamUnregisterSysApp"));
			add(new Replacer(0x0000024D, "XamAppReinitialize"));
			add(new Replacer(0x0000024E, "XamCreateEnumeratorHandle"));
			add(new Replacer(0x0000024F, "XamGetPrivateEnumStructureFromHandle"));
			add(new Replacer(0x00000250, "XamEnumerate"));
			add(new Replacer(0x00000251, "XamLoadSysApp"));
			add(new Replacer(0x00000252, "XamUnloadSysApp"));
			add(new Replacer(0x00000253, "XamReloadSysApp"));
			add(new Replacer(0x00000254, "XamAppLoadPass2SysApps"));
			add(new Replacer(0x00000255, "XamProfileGetLiveLegalLocale"));
			add(new Replacer(0x00000256, "XamUserIsParentalControlled"));
			add(new Replacer(0x00000257, "XamContentLaunchImageFromFileInternal"));
			add(new Replacer(0x00000258, "XamContentCreate"));
			add(new Replacer(0x00000259, "XamContentCreateEx"));
			add(new Replacer(0x0000025A, "XamContentClose"));
			add(new Replacer(0x0000025B, "XamContentDelete"));
			add(new Replacer(0x0000025C, "XamContentCreateEnumerator"));
			add(new Replacer(0x0000025D, "XamContentCreateDeviceEnumerator"));
			add(new Replacer(0x0000025E, "XamContentGetDeviceData"));
			add(new Replacer(0x0000025F, "XamContentGetDeviceName"));
			add(new Replacer(0x00000260, "XamContentSetThumbnail"));
			add(new Replacer(0x00000261, "XamContentGetThumbnail"));
			add(new Replacer(0x00000262, "XamContentGetCreator"));
			add(new Replacer(0x00000263, "XamContentLaunchImage"));
			add(new Replacer(0x00000264, "XamContentGetAttributes"));
			add(new Replacer(0x00000265, "XamContentGetDeviceState"));
			add(new Replacer(0x00000266, "XamContentGetLicenseMask"));
			add(new Replacer(0x00000267, "XamContentFlush"));
			add(new Replacer(0x00000268, "XamContentResolve"));
			add(new Replacer(0x00000269, "XamContentOpenFile"));
			add(new Replacer(0x0000026A, "XamContentInstall"));
			add(new Replacer(0x0000026B, "XamContentLockUnlockPackageHeaders"));
			add(new Replacer(0x0000026C, "XamContentCopyInternal"));
			add(new Replacer(0x0000026D, "XamContentMoveInternal"));
			add(new Replacer(0x0000026E, "XamContentGetMetaDataInternal"));
			add(new Replacer(0x0000026F, "XamContentCreateEnumeratorInternal"));
			add(new Replacer(0x00000270, "XamContentDeleteInternal"));
			add(new Replacer(0x00000271, "XamContentCreateInternal"));
			add(new Replacer(0x00000272, "XamContentSetThumbnailInternal"));
			add(new Replacer(0x00000273, "XamContentLaunchImageInternal"));
			add(new Replacer(0x00000274, "XamContentWritePackageHeader"));
			add(new Replacer(0x00000275, "XamContentDismountAndClosePackage"));
			add(new Replacer(0x00000276, "XamContentResolveInternal"));
			add(new Replacer(0x00000277, "XamContentGetAttributesInternal"));
			add(new Replacer(0x00000278, "XamContentOpenFileInternal"));
			add(new Replacer(0x00000279, "XamContentAggregateCreateEnumerator"));
			add(new Replacer(0x0000027A, "XamContentCreateAndMountPackage"));
			add(new Replacer(0x0000027B, "XamContentOpenPackageFile"));
			add(new Replacer(0x0000027C, "XamContentMountPackage"));
			add(new Replacer(0x0000027D, "XamContentFlushPackage"));
			add(new Replacer(0x0000027E, "XamContentClosePackageFile"));
			add(new Replacer(0x0000027F, "XamContentDuplicateFileHandle"));
			add(new Replacer(0x00000280, "XamGetExecutionId"));
			add(new Replacer(0x00000281, "XamGetGameRatings"));
			add(new Replacer(0x00000282, "XamGetSystemVersion"));
			add(new Replacer(0x00000283, "XamContentGetLocalizedString"));
			add(new Replacer(0x00000284, "XamContentGetDefaultDevice"));
			add(new Replacer(0x00000285, "XamContentInstallInternal"));
			add(new Replacer(0x00000286, "XamContentSetMediaMetaDataInternal"));
			add(new Replacer(0x00000287, "XamContentGetDeviceSerialNumber"));
			add(new Replacer(0x00000288, "XamContentGetMountedPackageByRootName"));
			add(new Replacer(0x00000289, "XamContentRegisterChangeCallback"));
			add(new Replacer(0x0000028A, "XamNotifyCreateListener"));
			add(new Replacer(0x0000028B, "XNotifyGetNext"));
			add(new Replacer(0x0000028C, "XNotifyPositionUI"));
			add(new Replacer(0x0000028D, "XNotifyDelayUI"));
			add(new Replacer(0x0000028E, "XNotifyBroadcast"));
			add(new Replacer(0x0000028F, "XNotifyRegisterArea"));
			add(new Replacer(0x00000290, "XNotifyQueueUI"));
			add(new Replacer(0x00000291, "XamNotifyCreateListenerInternal"));
			add(new Replacer(0x00000292, "XNotifyUISetOptions"));
			add(new Replacer(0x00000293, "XNotifyUIGetOptions"));
			add(new Replacer(0x00000294, "XamContentLaunchImageInternalEx"));
			add(new Replacer(0x00000295, "XamShutdown"));
			add(new Replacer(0x00000296, "XamAllocDevkitHeapAvailable"));
			add(new Replacer(0x00000297, "XamNotifyCreateListenerRangeInternal"));
			add(new Replacer(0x00000298, "XNotifyQueueUIEx"));
			add(new Replacer(0x00000299, "XamAppRequestLoadEx"));
			add(new Replacer(0x0000029A, "XuiPNGTextureLoader"));
			add(new Replacer(0x0000029B, "XuiRenderGetXuiDevice"));
			add(new Replacer(0x0000029C, "XuiDefault_False"));
			add(new Replacer(0x0000029D, "XamUserGetReportingInfo"));
			add(new Replacer(0x0000029E, "XamUpdateStart"));
			add(new Replacer(0x0000029F, "XamUpdateGetProgress"));
			add(new Replacer(0x000002A0, "XamUpdateGetExtenderInstance"));
			add(new Replacer(0x000002A1, "XamUpdateFinish"));
			add(new Replacer(0x000002A2, "XamUpdateAttachExtenderInstance"));
			add(new Replacer(0x000002A3, "XamUpdateAllocateExtenderBuffer"));
			add(new Replacer(0x000002A4, "XamRestartTitleLoadAfterUpdate"));
			add(new Replacer(0x000002A5, "XamUIThreadDisableFontPatching"));
			add(new Replacer(0x000002A6, "XamUpdateGetBaseSystemVersion"));
			add(new Replacer(0x000002A7, "XamUpdateGetCurrentSystemVersion"));
			add(new Replacer(0x000002A8, "XamUIThreadEnableFontPatching"));
			add(new Replacer(0x000002A9, "XamTerminateTitleForUpdate"));
			add(new Replacer(0x000002AA, "XamSystemUpdateInstallLocal"));
			add(new Replacer(0x000002AB, "XamUpdateChainPass3FromPass2"));
			add(new Replacer(0x000002AD, "XamInputGetCapabilitiesEx"));
			add(new Replacer(0x000002AE, "XamUserIsUnsafeProgrammingAllowed"));
			add(new Replacer(0x000002AF, "XamDevAuthSetFaultEx"));
			add(new Replacer(0x000002B0, "XamUpdateGetData"));
			add(new Replacer(0x000002B1, "XamCacheIntegrityCheck"));
			add(new Replacer(0x000002B2, "XamCacheStoreFile"));
			add(new Replacer(0x000002B3, "XamCacheFetchFile"));
			add(new Replacer(0x000002B4, "XamCacheOpenFile"));
			add(new Replacer(0x000002B5, "XamCacheCloseFile"));
			add(new Replacer(0x000002B6, "XamGetCachedTitleName"));
			add(new Replacer(0x000002B7, "XamCacheReset"));
			add(new Replacer(0x000002B8, "XamGetCachedGamerTag"));
			add(new Replacer(0x000002B9, "XamGetCachedGamerTagW"));
			add(new Replacer(0x000002BA, "XamCacheDeleteFile"));
			add(new Replacer(0x000002BB, "XamCacheRenameFile"));
			add(new Replacer(0x000002BC, "XamShowSigninUI"));
			add(new Replacer(0x000002BD, "XamShowSigninUIEx"));
			add(new Replacer(0x000002BE, "XamShowSigninUIp"));
			add(new Replacer(0x000002BF, "XamShowFriendsUI"));
			add(new Replacer(0x000002C0, "XamShowMessagesUI"));
			add(new Replacer(0x000002C1, "XamShowKeyboardUI"));
			add(new Replacer(0x000002C2, "XamShowQuickChatUI"));
			add(new Replacer(0x000002C3, "XamShowVoiceMailUI"));
			add(new Replacer(0x000002C4, "XamShowGamerCardUI"));
			add(new Replacer(0x000002C5, "XamShowAchievementsUI"));
			add(new Replacer(0x000002C6, "XamShowPlayerReviewUI"));
			add(new Replacer(0x000002C7, "XamShowMarketplaceUI"));
			add(new Replacer(0x000002C8, "XamShowPlayersUI"));
			add(new Replacer(0x000002C9, "XamShowUpdaterUI"));
			add(new Replacer(0x000002CA, "XamShowMessageBoxUI"));
			add(new Replacer(0x000002CB, "XamShowDeviceSelectorUI"));
			add(new Replacer(0x000002CC, "XamShowMessageComposeUI"));
			add(new Replacer(0x000002CD, "XamShowGameInviteUI"));
			add(new Replacer(0x000002CE, "XamShowFriendRequestUI"));
			add(new Replacer(0x000002CF, "XamShowCreateProfileUI"));
			add(new Replacer(0x000002D0, "XamShowGamesUI"));
			add(new Replacer(0x000002D1, "XamShowLiveSignupUI"));
			add(new Replacer(0x000002D2, "XamShowFriendsUIp"));
			add(new Replacer(0x000002D3, "XamShowComplaintUI"));
			add(new Replacer(0x000002D4, "XamShowReputationUI"));
			add(new Replacer(0x000002D5, "XamShowGamerCardUIForXUID"));
			add(new Replacer(0x000002D6, "XamShowForcedNameChangeUI"));
			add(new Replacer(0x000002D7, "XamShowLiveUpsellUI"));
			add(new Replacer(0x000002D8, "XamShowPasscodeVerifyUI"));
			add(new Replacer(0x000002D9, "XamShowDirtyDiscErrorUI"));
			add(new Replacer(0x000002DA, "XamShowSignupCreditCardUI"));
			add(new Replacer(0x000002DB, "XamShowPrivateChatInviteUI"));
			add(new Replacer(0x000002DC, "XamShowMessageBoxUIEx"));
			add(new Replacer(0x000002DD, "XamShowRecentMessageUI"));
			add(new Replacer(0x000002DE, "XamShowRecentMessageUIEx"));
			add(new Replacer(0x000002DF, "XamShowMessagesUIEx"));
			add(new Replacer(0x000002E0, "XamShowAchievementDetailsUI"));
			add(new Replacer(0x000002E1, "XamShowPersonalizationUI"));
			add(new Replacer(0x000002E2, "XamShowChangeGamerTileUI"));
			add(new Replacer(0x000002E3, "XamShowVoiceSettingsUI"));
			add(new Replacer(0x000002E4, "XamShowVideoChatInviteUI"));
			add(new Replacer(0x000002E5, "XamShowCustomMessageComposeUI"));
			add(new Replacer(0x000002E6, "XamShowCustomPlayerListUI"));
			add(new Replacer(0x000002E7, "XamShowMarketplaceDownloadItemsUI"));
			add(new Replacer(0x000002E8, "XamShowMarketplaceUIEx"));
			add(new Replacer(0x000002E9, "XamShowMessageBox"));
			add(new Replacer(0x000002EA, "XamIsSysUiInvokedByXenonButton"));
			add(new Replacer(0x000002EB, "XamIsSysUiInvokedByTitle"));
			add(new Replacer(0x000002EC, "XamIsUIActive"));
			add(new Replacer(0x000002ED, "XamSysUiDisableAutoClose"));
			add(new Replacer(0x000002EE, "XamUserCreateAchievementEnumerator"));
			add(new Replacer(0x000002EF, "XamReadTile"));
			add(new Replacer(0x000002F0, "XamWriteGamerTile"));
			add(new Replacer(0x000002F1, "XamWriteTile"));
			add(new Replacer(0x000002F2, "XamReadImage"));
			add(new Replacer(0x000002F3, "XamUserCreateTitlesPlayedEnumerator"));
			add(new Replacer(0x000002F4, "XamDecompressPNGToTexture"));
			add(new Replacer(0x000002F5, "XamReadTileToTexture"));
			add(new Replacer(0x000002F6, "XamReadString"));
			add(new Replacer(0x000002F7, "XamUserCreateStatsEnumerator"));
			add(new Replacer(0x000002F8, "XamPrepareGamerTiles"));
			add(new Replacer(0x000002F9, "XamClearTitle"));
			add(new Replacer(0x000002FA, "XamReadStrings"));
			add(new Replacer(0x000002FB, "XamWriteGamerTileEx"));
			add(new Replacer(0x000002FC, "XamReadTileEx"));
			add(new Replacer(0x000002FD, "XamReadTileToTextureEx"));
			add(new Replacer(0x000002FE, "XamShowMessengerUI"));
			add(new Replacer(0x000002FF, "XamShowKeyboardUIMessenger"));
			add(new Replacer(0x00000300, "XamShowLiveUpsellUIEx"));
			add(new Replacer(0x00000301, "XamShowJoinSessionInProgressUI"));
			add(new Replacer(0x00000302, "XamShowGraduateUserUI"));
			add(new Replacer(0x00000303, "XamShowGamerCardUIForXUIDp"));
			add(new Replacer(0x00000304, "XamShowGuideUI"));
			add(new Replacer(0x00000305, "XamShowPartyUI"));
			add(new Replacer(0x00000306, "XamShowPartyInviteUI"));
			add(new Replacer(0x00000307, "XamUserAddRecentPlayer"));
			add(new Replacer(0x00000308, "XamUserUpdateRecentPlayer"));
			add(new Replacer(0x00000309, "XamUserCreatePlayerEnumerator"));
			add(new Replacer(0x0000030A, "XamParseGamerTileKey"));
			add(new Replacer(0x0000030B, "XamShowCommunitySessionsUI"));
			add(new Replacer(0x0000030C, "XamVoiceCreate"));
			add(new Replacer(0x0000030D, "XamVoiceHeadsetPresent"));
			add(new Replacer(0x0000030E, "XamVoiceSubmitPacket"));
			add(new Replacer(0x0000030F, "XamVoiceClose"));
			add(new Replacer(0x00000310, "XamVoiceGetBatteryStatus"));
			add(new Replacer(0x00000311, "Refresh"));
			add(new Replacer(0x00000312, "Refresh"));
			add(new Replacer(0x00000313, "XamShowJoinSessionByIdInProgressUI"));
			add(new Replacer(0x00000314, "XamShowPartyJoinInProgressUI"));
			add(new Replacer(0x00000315, "XamBuildSharedSystemResourceLocator"));
			add(new Replacer(0x00000316, "XamSessionCreateHandle"));
			add(new Replacer(0x00000317, "XamSessionRefObjByHandle"));
			add(new Replacer(0x00000318, "XamVoiceGetMicArrayStatus"));
			add(new Replacer(0x00000319, "XamVoiceSetAudioCaptureRoutine"));
			add(new Replacer(0x0000031A, "XamVoiceGetDirectionalData"));
			add(new Replacer(0x0000031B, "XamBuildResourceLocator"));
			add(new Replacer(0x0000031C, "XamBuildSharedSystemResourceLocator"));
			add(new Replacer(0x0000031D, "XamBuildGamercardResourceLocator"));
			add(new Replacer(0x0000031E, "XamBuildDynamicResourceLocator"));
			add(new Replacer(0x0000031F, "XamBuildXamResourceLocator"));
			add(new Replacer(0x00000320, "XuiAnimRun"));
			add(new Replacer(0x00000321, "XuiApplyLocale"));
			add(new Replacer(0x00000322, "XuiBubbleMessage"));
			add(new Replacer(0x00000323, "XuiControlIsBackButton"));
			add(new Replacer(0x00000324, "XuiControlIsNavButton"));
			add(new Replacer(0x00000325, "XuiCreateObject"));
			add(new Replacer(0x00000326, "XuiDestroyObject"));
			add(new Replacer(0x00000327, "XuiDynamicCast"));
			add(new Replacer(0x00000328, "XuiElementAddChild"));
			add(new Replacer(0x00000329, "XuiElementFindNamedFrame"));
			add(new Replacer(0x0000032A, "XuiElementGetChildById"));
			add(new Replacer(0x0000032B, "XuiElementGetFirstChild"));
			add(new Replacer(0x0000032C, "XuiElementGetFocus"));
			add(new Replacer(0x0000032D, "XuiElementGetFocusUser"));
			add(new Replacer(0x0000032E, "XuiElementGetId"));
			add(new Replacer(0x0000032F, "XuiElementGetLastChild"));
			add(new Replacer(0x00000330, "XuiElementGetNext"));
			add(new Replacer(0x00000331, "XuiElementGetParent"));
			add(new Replacer(0x00000332, "XuiElementGetUserFocus"));
			add(new Replacer(0x00000333, "XuiElementInitFocus"));
			add(new Replacer(0x00000334, "XuiElementInitUserFocus"));
			add(new Replacer(0x00000335, "XuiElementPlayTimeline"));
			add(new Replacer(0x00000336, "XuiElementSetBounds"));
			add(new Replacer(0x00000337, "XuiElementSetFocus"));
			add(new Replacer(0x00000338, "XuiElementSetUserFocus"));
			add(new Replacer(0x00000339, "XuiElementTreeGetFocus"));
			add(new Replacer(0x0000033A, "XuiFindClass"));
			add(new Replacer(0x0000033B, "XuiFreeStringTable"));
			add(new Replacer(0x0000033C, "XuiGetBaseObject"));
			add(new Replacer(0x0000033D, "XuiGetClass"));
			add(new Replacer(0x0000033E, "XuiGetObjectClass"));
			add(new Replacer(0x0000033F, "XuiGetOuter"));
			add(new Replacer(0x00000340, "XuiInit"));
			add(new Replacer(0x00000341, "XuiLoadFromBinary"));
			add(new Replacer(0x00000342, "XuiLoadStringTableFromFile"));
			add(new Replacer(0x00000343, "XuiVisualGetBasePath"));
			add(new Replacer(0x00000344, "XuiLookupStringTable"));
			add(new Replacer(0x00000345, "XuiNavButtonGetPressPath"));
			add(new Replacer(0x00000346, "XuiObjectFromHandle"));
			add(new Replacer(0x00000347, "XuiObjectGetProperty"));
			add(new Replacer(0x00000348, "XuiObjectGetPropertyId"));
			add(new Replacer(0x00000349, "XuiProcessInput"));
			add(new Replacer(0x0000034A, "XuiRegisterClass"));
			add(new Replacer(0x0000034B, "XuiRenderBegin"));
			add(new Replacer(0x0000034C, "XuiRenderCreateDC"));
			add(new Replacer(0x0000034D, "XuiRenderDCDeviceChanged"));
			add(new Replacer(0x0000034E, "XuiRenderDestroyDC"));
			add(new Replacer(0x0000034F, "XuiRenderEnd"));
			add(new Replacer(0x00000350, "XuiRenderGetBackBufferSize"));
			add(new Replacer(0x00000351, "XuiRenderInit"));
			add(new Replacer(0x00000352, "XuiRenderInitShared"));
			add(new Replacer(0x00000353, "XuiRenderPresent"));
			add(new Replacer(0x00000354, "XuiRenderSetViewTransform"));
			add(new Replacer(0x00000355, "XuiRenderUninit"));
			add(new Replacer(0x00000356, "XamShowNuiGuideUI"));
			add(new Replacer(0x00000357, "XuiSceneCreate"));
			add(new Replacer(0x00000358, "XuiSceneNavigateBack"));
			add(new Replacer(0x00000359, "XuiSceneNavigateFirst"));
			add(new Replacer(0x0000035A, "XuiSceneNavigateForward"));
			add(new Replacer(0x0000035B, "XuiScenePlayBackFromTransition"));
			add(new Replacer(0x0000035C, "XuiScenePlayBackToTransition"));
			add(new Replacer(0x0000035D, "XuiScenePlayFromTransition"));
			add(new Replacer(0x0000035E, "XuiScenePlayToTransition"));
			add(new Replacer(0x0000035F, "XuiSendMessage"));
			add(new Replacer(0x00000360, "XuiSetLocale"));
			add(new Replacer(0x00000361, "XuiUninit"));
			add(new Replacer(0x00000362, "XuiUnregisterClass"));
			add(new Replacer(0x00000363, "XuiTextElementSetText"));
			add(new Replacer(0x00000364, "XuiSetTimer"));
			add(new Replacer(0x00000365, "XuiTimersRun"));
			add(new Replacer(0x00000366, "XuiTextElementGetText"));
			add(new Replacer(0x00000367, "XuiVisualSetBasePath"));
			add(new Replacer(0x00000368, "XuiHandleIsValid"));
			add(new Replacer(0x00000369, "XuiAlloc"));
			add(new Replacer(0x0000036A, "XuiFree"));
			add(new Replacer(0x0000036B, "XuiDefault_True"));
			add(new Replacer(0x0000036C, "XuiDefault_EmptyString"));
			add(new Replacer(0x0000036D, "XuiDefault_IntegerZero"));
			add(new Replacer(0x0000036E, "XuiCopyString"));
			add(new Replacer(0x0000036F, "XuiRealloc"));
			add(new Replacer(0x00000370, "XuiControlPlayOptionalVisual"));
			add(new Replacer(0x00000371, "XuiKillTimer"));
			add(new Replacer(0x00000372, "XuiElementEnableInput"));
			add(new Replacer(0x00000373, "XuiElementInputEnabled"));
			add(new Replacer(0x00000374, "XuiIsInstanceOf"));
			add(new Replacer(0x00000375, "XuiResourceComposeLocator"));
			add(new Replacer(0x00000376, "XuiResourceLocatorIsAbsolute"));
			add(new Replacer(0x00000377, "XuiBroadcastMessage"));
			add(new Replacer(0x00000378, "XuiElementDisallowRecursiveTimelineControl"));
			add(new Replacer(0x00000379, "XUIElementPropVal_Construct"));
			add(new Replacer(0x0000037A, "XUIElementPropVal_Destruct"));
			add(new Replacer(0x0000037B, "XUIElementPropVal_SetString"));
			add(new Replacer(0x0000037C, "XuiObjectSetProperty"));
			add(new Replacer(0x0000037D, "XuiElementGetOpacity"));
			add(new Replacer(0x0000037E, "XuiElementSetOpacity"));
			add(new Replacer(0x0000037F, "XuiEditSetTextLimit"));
			add(new Replacer(0x00000380, "XuiEditGetTextLimit"));
			add(new Replacer(0x00000381, "XuiSliderSetValue"));
			add(new Replacer(0x00000382, "XuiSliderGetValue"));
			add(new Replacer(0x00000383, "XuiSliderSetRange"));
			add(new Replacer(0x00000384, "XuiElementUnlink"));
			add(new Replacer(0x00000385, "XuiElementInsertChild"));
			add(new Replacer(0x00000386, "XuiSceneNavigateBackToFirst"));
			add(new Replacer(0x00000387, "XuiProgressBarSetRange"));
			add(new Replacer(0x00000388, "XuiProgressBarSetValue"));
			add(new Replacer(0x00000389, "XuiProgressBarGetValue"));
			add(new Replacer(0x0000038A, "XuiControlAttachVisual"));
			add(new Replacer(0x0000038B, "XuiCreateTextureBrush"));
			add(new Replacer(0x0000038C, "XuiDestroyBrush"));
			add(new Replacer(0x0000038D, "XUIElementPropVal_SetColorFromUint"));
			add(new Replacer(0x0000038E, "XuiFigureSetFill"));
			add(new Replacer(0x0000038F, "XuiSliderGetRange"));
			add(new Replacer(0x00000390, "XuiFigureSetTexture"));
			add(new Replacer(0x00000391, "XuiControlGetItemAssociation"));
			add(new Replacer(0x00000392, "XuiResourceLoadAll"));
			add(new Replacer(0x00000393, "XuiImageElementSetImagePath"));
			add(new Replacer(0x00000394, "XuiImageElementGetImagePath"));
			add(new Replacer(0x00000395, "XuiControlGetVisual"));
			add(new Replacer(0x00000396, "XuiControlGetNavigation"));
			add(new Replacer(0x00000397, "XuiLookupStringTableByIndex"));
			add(new Replacer(0x00000398, "XUIElementPropVal_SetBool"));
			add(new Replacer(0x00000399, "XuiElementHasFocus"));
			add(new Replacer(0x0000039A, "XUIElementPropVal_SetUint"));
			add(new Replacer(0x0000039B, "XUIElementPropVal_Clear"));
			add(new Replacer(0x0000039C, "XuiEditSetTextFormatInfo"));
			add(new Replacer(0x0000039D, "XuiCreateSolidBrush"));
			add(new Replacer(0x0000039E, "XuiSceneInterruptTransitions"));
			add(new Replacer(0x0000039F, "XuiResourceOpen"));
			add(new Replacer(0x000003A0, "XuiResourceRead"));
			add(new Replacer(0x000003A1, "XuiResourceClose"));
			add(new Replacer(0x000003A2, "XuiVisualCreateInstance"));
			add(new Replacer(0x000003A3, "XuiElementGetTimeline"));
			add(new Replacer(0x000003A4, "GetCodecVersion"));
			add(new Replacer(0x000003A5, "XuiElementIsDescendant"));
			add(new Replacer(0x000003A6, "XuiSetMessageFilter"));
			add(new Replacer(0x000003A7, "XuiAttachTextureBrush"));
			add(new Replacer(0x000003A8, "XuiElementBeginRender"));
			add(new Replacer(0x000003A9, "XuiElementEndRender"));
			add(new Replacer(0x000003AA, "XuiDrawShape"));
			add(new Replacer(0x000003AB, "XuiSelectBrushEx"));
			add(new Replacer(0x000003AC, "XuiFigureGetShape"));
			add(new Replacer(0x000003AD, "XuiFillRect"));
			add(new Replacer(0x000003AE, "XuiVec2TransformCoord"));
			add(new Replacer(0x000003AF, "XuiMatrixMultiply"));
			add(new Replacer(0x000003B0, "XuiElementGetXForm"));
			add(new Replacer(0x000003B1, "XuiElementSetPosition"));
			add(new Replacer(0x000003B2, "XuiSelectBrush"));
			add(new Replacer(0x000003B3, "XuiElementRenderChildren"));
			add(new Replacer(0x000003B4, "XuiFreeUnusedTextures"));
			add(new Replacer(0x000003B5, "XuiListEnableItemOverride"));
			add(new Replacer(0x000003B6, "XuiListGetDefaultItemSize"));
			add(new Replacer(0x000003B7, "XuiResourceSeek"));
			add(new Replacer(0x000003B8, "XuiElementDiscardResources"));
			add(new Replacer(0x000003B9, "XuiTabSceneGoto"));
			add(new Replacer(0x000003BA, "XuiTabSceneGetCurrentTab"));
			add(new Replacer(0x000003BB, "XamShowWhatsOnUI"));
			add(new Replacer(0x000003BC, "XamShowEditProfileUI"));
			add(new Replacer(0x000003BD, "XamShowStorePickerUI"));
			add(new Replacer(0x000003BE, "XamShowTermsOfUseUI"));
			add(new Replacer(0x000003BF, "XamShowJoinPartyUI"));
			add(new Replacer(0x000003C0, "XamShowWordRegisterUI"));
			add(new Replacer(0x000003C1, "XamOverrideHudOpenType"));
			add(new Replacer(0x000003C2, "XamShowAchievementsUIEx"));
			add(new Replacer(0x000003C3, "XamUserGetUserTenure"));
			add(new Replacer(0x000003C4, "XamUserGetSubscriptionType"));
			add(new Replacer(0x000003C5, "XamShowGameVoiceChannelUI"));
			add(new Replacer(0x000003C6, "XamShowAvatarAwardsUI"));
			add(new Replacer(0x000003C7, "XamShowAvatarAwardGamesUI"));
			add(new Replacer(0x000003C8, "XamShowVideoRichPresenceUI"));
			add(new Replacer(0x000003C9, "XamHudGetUserIndex"));
			add(new Replacer(0x000003CA, "XGetAudioFlags"));
			add(new Replacer(0x000003CB, "XGetAVPack"));
			add(new Replacer(0x000003CC, "XGetGameRegion"));
			add(new Replacer(0x000003CD, "XGetLanguage"));
			add(new Replacer(0x000003CE, "XapipGetLocale"));
			add(new Replacer(0x000003CF, "XGetVideoFlags"));
			add(new Replacer(0x000003D0, "XGetVideoStandard"));
			add(new Replacer(0x000003D1, "XGetVideoMode"));
			add(new Replacer(0x000003D2, "XamGetLanguage"));
			add(new Replacer(0x000003D3, "XUITimeline_Run"));
			add(new Replacer(0x000003D4, "XamSetAutomation"));
			add(new Replacer(0x000003D5, "XAutomationpBindController"));
			add(new Replacer(0x000003D6, "XAutomationpUnbindController"));
			add(new Replacer(0x000003D7, "XAutomationpInputXenonButton"));
			add(new Replacer(0x000003D8, "XAutomationpInputPress"));
			add(new Replacer(0x000003D9, "XAutomationpInputSetState"));
			add(new Replacer(0x000003DA, "XamEnableOverdraw"));
			add(new Replacer(0x000003DB, "g_XuiAutomation"));
			add(new Replacer(0x000003DC, "XamVoiceGetMicArrayAudio"));
			add(new Replacer(0x000003DD, "XampSystemInput"));
			add(new Replacer(0x000003DE, "XamInputControl"));
			add(new Replacer(0x000003DF, "XuiElementGetPosition"));
			add(new Replacer(0x000003E0, "XamIsMessageBoxActive"));
			add(new Replacer(0x000003E1, "XamIsBackgroundSceneInTransition"));
			add(new Replacer(0x000003E2, "XuiElementTreeHasFocus"));
			add(new Replacer(0x000003E3, "XuiFigureClose"));
			add(new Replacer(0x000003E4, "GamerCardStartup"));
			add(new Replacer(0x000003E5, "GamerCardCleanup"));
			add(new Replacer(0x000003E6, "GamerCardRegisterControls"));
			add(new Replacer(0x000003E7, "GamerCardUnregisterControls"));
			add(new Replacer(0x000003E8, "RtlFindFirstFile"));
			add(new Replacer(0x000003E9, "RtlFindNextFile"));
			add(new Replacer(0x000003EA, "RtlGetModuleFileName"));
			add(new Replacer(0x000003EB, "RtlOutputDebugString"));
			add(new Replacer(0x000003EC, "RtlRemoveDirectory"));
			add(new Replacer(0x000003ED, "RtlSleep"));
			add(new Replacer(0x000003EE, "RtlGetLastError"));
			add(new Replacer(0x000003EF, "RtlSetLastError"));
			add(new Replacer(0x000003F0, "RtlSetLastNTError"));
			add(new Replacer(0x000003F1, "RtlDebugPrint"));
			add(new Replacer(0x000003F2, "RtlDebugError"));
			add(new Replacer(0x000003F3, "XDebugWarning"));
			add(new Replacer(0x000003F4, "RtlDebugTrace"));
			add(new Replacer(0x000003F5, "RtlDebugEntry"));
			add(new Replacer(0x000003F6, "RtlDebugExit"));
			add(new Replacer(0x000003F7, "RtlGetAttributesOnHeapAlloc"));
			add(new Replacer(0x000003F8, "RtlSetAttributesOnHeapAlloc"));
			add(new Replacer(0x000003F9, "XuiFigureSetShape"));
			add(new Replacer(0x000003FA, "RtlCreateHeap"));
			add(new Replacer(0x000003FB, "RtlDestroyHeap"));
			add(new Replacer(0x000003FC, "RtlAllocateHeap"));
			add(new Replacer(0x000003FD, "RtlAllocateHeapSlowly"));
			add(new Replacer(0x000003FE, "RtlReAllocateHeap"));
			add(new Replacer(0x000003FF, "RtlFreeHeap"));
			add(new Replacer(0x00000400, "RtlFreeHeapSlowly"));
			add(new Replacer(0x00000401, "RtlSizeHeap"));
			add(new Replacer(0x00000402, "RtlZeroHeap"));
			add(new Replacer(0x00000403, "RtlDebugWalkHeap"));
			add(new Replacer(0x00000404, "RtlWalkHeap"));
			add(new Replacer(0x00000405, "RtlLockHeap"));
			add(new Replacer(0x00000406, "RtlUnlockHeap"));
			add(new Replacer(0x00000407, "RtlValidateHeap"));
			add(new Replacer(0x00000408, "RtlDebugCompactHeap"));
			add(new Replacer(0x00000409, "RtlCompactHeap"));
			add(new Replacer(0x0000040A, "XamAppSetTestOption"));
			add(new Replacer(0x0000040B, "XamAppReportError"));
			add(new Replacer(0x0000040C, "XamIsNuiUIActive"));
			add(new Replacer(0x0000040D, "XamVerifyPasscode"));
			add(new Replacer(0x0000040E, "OutputDebugStringA"));
			add(new Replacer(0x0000040F, "DebugBreak"));
			add(new Replacer(0x00000410, "GetCurrentThreadId"));
			add(new Replacer(0x00000411, "XDebugError"));
			add(new Replacer(0x00000412, "XDebugWarning"));
			add(new Replacer(0x00000413, "RtlDebugSetLevel"));
			add(new Replacer(0x00000414, "CloseHandle"));
			add(new Replacer(0x00000415, "GetTickCount"));
			add(new Replacer(0x00000416, "GetLastError"));
			add(new Replacer(0x00000417, "SetFilePointer"));
			add(new Replacer(0x00000418, "SetFilePointerEx"));
			add(new Replacer(0x00000419, "SetLastError"));
			add(new Replacer(0x0000041A, "MultiByteToWideChar"));
			add(new Replacer(0x0000041B, "WideCharToMultiByte"));
			add(new Replacer(0x0000041C, "ReadFile"));
			add(new Replacer(0x0000041D, "FlushFileBuffers"));
			add(new Replacer(0x0000041E, "WriteFile"));
			add(new Replacer(0x0000041F, "OutputDebugStringW"));
			add(new Replacer(0x00000420, "SetEvent"));
			add(new Replacer(0x00000421, "XapiFormatTimeOut"));
			add(new Replacer(0x00000422, "CreateMutexA"));
			add(new Replacer(0x00000423, "OpenMutexA"));
			add(new Replacer(0x00000424, "ReleaseMutex"));
			add(new Replacer(0x00000425, "WaitForSingleObject"));
			add(new Replacer(0x00000426, "WaitForSingleObjectEx"));
			add(new Replacer(0x00000427, "GetFileSize"));
			add(new Replacer(0x00000428, "GetFileSizeEx"));
			add(new Replacer(0x00000429, "XapiDirectoryInformationToFindData"));
			add(new Replacer(0x0000042A, "XapiFormatObjectAttributes"));
			add(new Replacer(0x0000042B, "ResetEvent"));
			add(new Replacer(0x0000042C, "wsprintfA"));
			add(new Replacer(0x0000042D, "wsprintfW"));
			add(new Replacer(0x0000042E, "GetOverlappedResult"));
			add(new Replacer(0x0000042F, "QueryPerformanceCounter"));
			add(new Replacer(0x00000430, "QueryPerformanceFrequency"));
			add(new Replacer(0x00000431, "LocalAlloc"));
			add(new Replacer(0x00000432, "LocalFree"));
			add(new Replacer(0x00000433, "RaiseException"));
			add(new Replacer(0x00000434, "RtlUniform"));
			add(new Replacer(0x00000435, "RtlRandom"));
			add(new Replacer(0x00000436, "Sleep"));
			add(new Replacer(0x00000437, "SleepEx"));
			add(new Replacer(0x00000438, "XMemSet"));
			add(new Replacer(0x00000439, "XRegisterThreadNotifyRoutine"));
			add(new Replacer(0x0000043A, "XGetOverlappedExtendedError"));
			add(new Replacer(0x0000043B, "XGetOverlappedResult"));
			add(new Replacer(0x0000043C, "CreateThread"));
			add(new Replacer(0x0000043D, "ResumeThread"));
			add(new Replacer(0x0000043E, "ExitThread"));
			add(new Replacer(0x0000043F, "GetTimeZoneInformation"));
			add(new Replacer(0x00000440, "GetSystemTimeAsFileTime"));
			add(new Replacer(0x00000441, "SystemTimeToFileTime"));
			add(new Replacer(0x00000442, "FileTimeToSystemTime"));
			add(new Replacer(0x00000443, "GetSystemTime"));
			add(new Replacer(0x00000444, "GetLocalTime"));
			add(new Replacer(0x00000445, "CreateDirectoryA"));
			add(new Replacer(0x00000446, "CreateEventA"));
			add(new Replacer(0x00000447, "CreateFileA"));
			add(new Replacer(0x00000448, "DeleteFileA"));
			add(new Replacer(0x00000449, "FindFirstFileA"));
			add(new Replacer(0x0000044A, "FindNextFileA"));
			add(new Replacer(0x0000044B, "GetFileAttributesA"));
			add(new Replacer(0x0000044C, "XamLoaderGetCurrentTitleD3DVersion"));
			add(new Replacer(0x0000044D, "GetFileAttributesExA"));
			add(new Replacer(0x0000044E, "GetModuleHandleA"));
			add(new Replacer(0x0000044F, "GetDiskFreeSpaceExA"));
			add(new Replacer(0x00000450, "CopyFileA"));
			add(new Replacer(0x00000451, "SetEndOfFile"));
			add(new Replacer(0x00000452, "XamFamilyAddParentalExemptionToList"));
			add(new Replacer(0x00000453, "XamFamilyIsParentalValidationRequired"));
			add(new Replacer(0x00000454, "PIXBeginCapture"));
			add(new Replacer(0x00000455, "PIXEndCapture"));
			add(new Replacer(0x00000456, "PIXAddCounter"));
			add(new Replacer(0x00000457, "PIXGetGPUSlot"));
			add(new Replacer(0x00000458, "SetWaitableTimer"));
			add(new Replacer(0x00000459, "CancelWaitableTimer"));
			add(new Replacer(0x0000045A, "CreateWaitableTimerA"));
			add(new Replacer(0x0000045B, "DuplicateHandle"));
			add(new Replacer(0x0000045C, "XapipCreateThread"));
			add(new Replacer(0x0000045D, "lstrcpyA"));
			add(new Replacer(0x0000045E, "lstrcpyW"));
			add(new Replacer(0x0000045F, "lstrcpynA"));
			add(new Replacer(0x00000460, "lstrcpynW"));
			add(new Replacer(0x00000461, "lstrcatA"));
			add(new Replacer(0x00000462, "lstrcatW"));
			add(new Replacer(0x00000463, "lstrlenA"));
			add(new Replacer(0x00000464, "lstrlenW"));
			add(new Replacer(0x00000465, "IsBadReadPtr"));
			add(new Replacer(0x00000466, "IsBadWritePtr"));
			add(new Replacer(0x00000467, "FileTimeToLocalFileTime"));
			add(new Replacer(0x00000468, "XMemCpy"));
			add(new Replacer(0x00000469, "XMemCpyStreaming"));
			add(new Replacer(0x0000046A, "XamHudSetUserIndex"));
			add(new Replacer(0x0000046B, "XamShowNuiTroubleshooterUI"));
			add(new Replacer(0x0000046C, "XamTestShowNuiTroubleshooterUI"));
			add(new Replacer(0x0000046D, "XamShowPasscodeVerifyUIEx"));
			add(new Replacer(0x0000046E, "XamShowNuiAchievementsUI"));
			add(new Replacer(0x0000046F, "XamShowNuiCommunitySessionsUI"));
			add(new Replacer(0x00000470, "XamShowNuiDeviceSelectorUI"));
			add(new Replacer(0x00000471, "XamShowNuiDirtyDiscErrorUI"));
			add(new Replacer(0x00000472, "XamShowNuiFriendsUI"));
			add(new Replacer(0x00000473, "XamShowNuiGameInviteUI"));
			add(new Replacer(0x00000474, "XamShowNuiGamerCardUIForXUID"));
			add(new Replacer(0x00000475, "XamShowNuiMarketplaceDownloadItemsUI"));
			add(new Replacer(0x00000476, "XamShowNuiMarketplaceUI"));
			add(new Replacer(0x00000477, "XamShowNuiMessageBoxUI"));
			add(new Replacer(0x00000478, "XamShowNuiPartyUI"));
			add(new Replacer(0x00000479, "XamShowNuiFriendRequestUI"));
			add(new Replacer(0x0000047A, "XamShowNuiSigninUI"));
			add(new Replacer(0x0000047B, "XamShowNuiControllerRequiredUI"));
			add(new Replacer(0x0000047C, "XamShowNuiGamesUI"));
			add(new Replacer(0x0000047D, "XamShowNuiHardwareRequiredUI"));
			add(new Replacer(0x0000047E, "XamCacheStoreFileByString"));
			add(new Replacer(0x0000047F, "XamCacheFetchFileByString"));
			add(new Replacer(0x00000480, "XamCacheDeleteFileByString"));
			add(new Replacer(0x00000481, "XamGetCachedTitleNameEx"));
			add(new Replacer(0x00000482, "XamXlfsInitializeUploadQueue"));
			add(new Replacer(0x00000483, "XamXlfsUninitializeUploadQueue"));
			add(new Replacer(0x00000484, "XamXlfsMountUploadQueueInstance"));
			add(new Replacer(0x00000485, "XamXlfsUnmountUploadQueueInstance"));
			add(new Replacer(0x00000486, "XamVoiceRecordUserPrivileges"));
			add(new Replacer(0x00000487, "XamXlfsInitializeUploadQueueWithTestHooks"));
			add(new Replacer(0x00000488, "XamXlfsNotifyContentDeletion"));
			add(new Replacer(0x00000489, "XMemAlloc"));
			add(new Replacer(0x0000048A, "XMemFree"));
			add(new Replacer(0x0000048B, "XMemSize"));
			add(new Replacer(0x0000048C, "XamVoiceSetMicArrayIdleUsers"));
			add(new Replacer(0x0000048D, "XamVoiceMuteMicArray"));
			add(new Replacer(0x0000048E, "XamVoiceGetMicArrayUnderrunStatus"));
			add(new Replacer(0x0000048F, "XuiSceneEnableTransitionDependency"));
			add(new Replacer(0x00000490, "XamVoiceGetMicArrayAudioEx"));
			add(new Replacer(0x00000491, "XamVoiceDisableMicArray"));
			add(new Replacer(0x00000497, "XamVoiceIsActiveProcess"));
			add(new Replacer(0x000004B0, "XMPRegisterCodec"));
			add(new Replacer(0x00000514, "XamIsCurrentTitleIptv"));
			add(new Replacer(0x00000515, "XamIsIptvEnabled"));
			add(new Replacer(0x00000516, "XamIsDvrRecording"));
			add(new Replacer(0x00000517, "XamIptvUninstall"));
			add(new Replacer(0x00000518, "XamGetDvrStorage"));
			add(new Replacer(0x00000519, "XamSetDvrStorage"));
			add(new Replacer(0x0000051A, "XamIptvGetServiceName"));
			add(new Replacer(0x0000051B, "XamNuiHudGetEngagedEnrollmentIndex"));
			add(new Replacer(0x00000578, "XamReminderGetItems"));
			add(new Replacer(0x00000579, "XamReminderClearItems"));
			add(new Replacer(0x0000057A, "XamReminderItemAdd"));
			add(new Replacer(0x0000057B, "XamReminderItemRemove"));
			add(new Replacer(0x0000057C, "XamReminderGetNextItem"));
			add(new Replacer(0x0000057D, "XamReminderGetModifiedTime"));
			add(new Replacer(0x0000057E, "XamReminderClearCache"));
			add(new Replacer(0x000005DC, "XamAvatarInitialize"));
			add(new Replacer(0x000005DD, "XamAvatarShutdown"));
			add(new Replacer(0x000005DE, "XamAvatarGetManifestLocalUser"));
			add(new Replacer(0x000005DF, "XamAvatarGetManifestsByXuid"));
			add(new Replacer(0x000005E0, "XamAvatarGetAssetsResultSize"));
			add(new Replacer(0x000005E1, "XamAvatarGetAssets"));
			add(new Replacer(0x000005E2, "XamAvatarGenerateMipMaps"));
			add(new Replacer(0x000005E3, "XamAvatarSetCustomAsset"));
			add(new Replacer(0x000005E4, "XamAvatarSetManifest"));
			add(new Replacer(0x000005E5, "EnumerateMediaObjects"));
			add(new Replacer(0x000005E6, "EnumerateMediaObjects"));
			add(new Replacer(0x000005E7, "XamAvatarLoadAnimation"));
			add(new Replacer(0x000005E8, "XamAvatarBeginEnumAssets"));
			add(new Replacer(0x000005E9, "XamAvatarEndEnumAssets"));
			add(new Replacer(0x000005EA, "XamAvatarEnumAssets"));
			add(new Replacer(0x000005EB, "XamAvatarGetMetadataRandom"));
			add(new Replacer(0x000005EC, "EnumerateMediaObjects"));
			add(new Replacer(0x000005ED, "EnumerateMediaObjects"));
			add(new Replacer(0x000005EE, "XamAvatarGetMetadataSignedOutProfileCount"));
			add(new Replacer(0x000005EF, "XamAvatarGetMetadataSignedOutProfile"));
			add(new Replacer(0x000005F0, "EnumerateMediaObjects"));
			add(new Replacer(0x000005F1, "XamAvatarManifestGetBodyType"));
			add(new Replacer(0x000005F2, "XamAvatarGetInstrumentation"));
			add(new Replacer(0x000005F3, "XamAvatarGetAssetIcon"));
			add(new Replacer(0x000005F4, "XamAvatarWearNow"));
			add(new Replacer(0x000005F5, "XamAvatarGetAssetBinary"));
			add(new Replacer(0x000005F6, "XamAvatarReinstallAwardedAsset"));
			add(new Replacer(0x000005F7, "XamAvatarGetInstalledAssetPackageDescription"));
			add(new Replacer(0x000005F8, "XamAvatarSetMocks"));
			add(new Replacer(0x0000060E, "XamContentMountInstalledGame"));
			add(new Replacer(0x0000060F, "XamContentIsGameInstalledToHDD"));
			add(new Replacer(0x00000610, "XamContentQueryLicenseInternal"));
			add(new Replacer(0x00000611, "XamContentGetDeviceVolumePath"));
			add(new Replacer(0x00000612, "XamContentDeviceCheckUpdates"));
			add(new Replacer(0x00000613, "XamContentGetHeaderInternal"));
			add(new Replacer(0x00000640, "XamPackageManagerFindPackageContainingIndexedXEX"));
			add(new Replacer(0x00000641, "XamPackageManagerReinitialize"));
			add(new Replacer(0x00000642, "XamPackageManagerGetAuthoritativeManifestVersion"));
			add(new Replacer(0x00000643, "XamGetCurrentSystemOnlineManifestRevision"));
			add(new Replacer(0x00000644, "XamPackageManagerDeleteExtendedPartition"));
			add(new Replacer(0x00000645, "XamPackageManagerHasExtendedPartition"));
			add(new Replacer(0x00000646, "XamPackageManagerGetExperienceMode"));
			add(new Replacer(0x00000647, "XamPackageManagerGetFeatureRequiresUpdateStrings"));
			add(new Replacer(0x00000648, "XamPackageManagerGetFileSize"));
			add(new Replacer(0x00000649, "XampDemandUpdateGetAttributes"));
			add(new Replacer(0x0000064A, "XampDemandUpdateGetExtendedAttributes"));
			add(new Replacer(0x0000064B, "XampDemandUpdateGetInstance"));
			add(new Replacer(0x0000064C, "XampDemandUpdateSetRefreshTestFlags"));
			add(new Replacer(0x0000064D, "XampDemandUpdateIsRefreshTestFlagSet"));
			add(new Replacer(0x0000064E, "XampDemandUpdateGetManifestLocalPath"));
			add(new Replacer(0x0000064F, "XampDemandUpdateRefreshManifest"));
			add(new Replacer(0x00000650, "XdfInitialize"));
			add(new Replacer(0x00000651, "XdfShutdown"));
			add(new Replacer(0x00000652, "XdfGetExpectedDownloadSize"));
			add(new Replacer(0x00000653, "XdfGetItem"));
			add(new Replacer(0x00000654, "XdfCacheItem"));
			add(new Replacer(0x00000655, "XdfLoadXexFromCache"));
			add(new Replacer(0x00000656, "XdfLoadXex"));
			add(new Replacer(0x00000657, "XdfCancelRequest"));
			add(new Replacer(0x00000658, "XdfResumeDelayedItem"));
			add(new Replacer(0x00000659, "XdfLaunchNewImageFromCache"));
			add(new Replacer(0x0000065A, "XampDemandUpdateRefreshManifestDuringLogon"));
			add(new Replacer(0x0000065B, "XampDemandUpdateCheckOnlineManifestChanged"));
			add(new Replacer(0x0000065C, "XampDemandUpdateRunCacheCleaner"));
			add(new Replacer(0x00000686, "XamXStudioRequest"));
			add(new Replacer(0x000006A4, "XamShowAvatarMiniCreatorUI"));
			add(new Replacer(0x000006A5, "XamShowGoldUpgradeUI"));
			add(new Replacer(0x000006A6, "XamResumeUpdaterUI"));
			add(new Replacer(0x000006A7, "XamShowDirectAcquireUI"));
			add(new Replacer(0x000006A8, "XamShowPaymentOptionsUI"));
			add(new Replacer(0x00000708, "XamGetLiveHiveValueA"));
			add(new Replacer(0x00000709, "XamGetLiveHiveValueW"));
			add(new Replacer(0x0000070A, "XamGetLiveHiveValueDuringLogonAttemptA"));
			add(new Replacer(0x0000076C, "XamDownloadMarketplaceStoresList"));
			add(new Replacer(0x0000076D, "XamGetStoreFront"));
			add(new Replacer(0x0000076E, "XamSetStagingMode"));
			add(new Replacer(0x0000076F, "XamGetStagingMode"));
			add(new Replacer(0x00000770, "XamAppGetSessionId"));
			add(new Replacer(0x000007D0, "XamDoesOmniNeedConfiguration"));
			add(new Replacer(0x000007D1, "XamFirstRunExperienceShouldRun"));
			add(new Replacer(0x000007D2, "GetProcessHeap"));
			add(new Replacer(0x000007D3, "UnhandledExceptionFilter"));
			add(new Replacer(0x000007D4, "SetUnhandledExceptionFilter"));
			add(new Replacer(0x000007D5, "XamIsOptionalMediaUpdateInstalled"));
			add(new Replacer(0x000007D6, "XamShowOptionalMediaUpdateRequiredUI"));
			add(new Replacer(0x000007D7, "XamShowOptionalMediaUpdateRequiredUIEx"));
			add(new Replacer(0x000007D8, "XamShowFirstRunWelcomeUI"));
			add(new Replacer(0x000007D9, "XamTaskCreateQueueEx"));
			add(new Replacer(0x000007DA, "XamSetDashBackstackData"));
			add(new Replacer(0x000007DB, "XamLaunchAvatarEditor"));
			add(new Replacer(0x000007DC, "XamGetDashBackstackData"));
			add(new Replacer(0x000007DD, "XamGetDashBackstackNodesCount"));
			add(new Replacer(0x000007DE, "XamSetLastActiveUserData"));
			add(new Replacer(0x000007DF, "XamGetLastActiveUserData"));
			add(new Replacer(0x000007E0, "XamSetActiveDashAppInfo"));
			add(new Replacer(0x000007E1, "XamGetActiveDashAppInfo"));
			add(new Replacer(0x00000802, "XamUserCreateAvatarAssetEnumerator"));
			add(new Replacer(0x00000803, "XamInitializeGameTileCache"));
			add(new Replacer(0x00000804, "XamDestroyGameTileCache"));
			add(new Replacer(0x00000805, "XamReadGameTileImage"));
			add(new Replacer(0x00000806, "XamShouldThrottleAccountInfoCall"));
			add(new Replacer(0x00000807, "XuiClassDerivesFrom"));
			add(new Replacer(0x00000808, "XuiFreeVisuals"));
			add(new Replacer(0x00000809, "XuiGetBaseClass"));
			add(new Replacer(0x0000080A, "XuiLoadVisualFromBinary"));
			add(new Replacer(0x0000080B, "XuiResourceGetBuffer"));
			add(new Replacer(0x0000080C, "XuiResourceGetTotalSize"));
			add(new Replacer(0x0000080D, "XuiElementGetUserData"));
			add(new Replacer(0x0000080E, "XuiElementSetUserData"));
			add(new Replacer(0x0000080F, "XuiTabSceneGetCount"));
			add(new Replacer(0x00000810, "XuiSliderGetStep"));
			add(new Replacer(0x00000811, "XuiSliderSetStep"));
			add(new Replacer(0x00000812, "XuiProgressBarGetRange"));
			add(new Replacer(0x00000813, "XuiElementSetHittable"));
			add(new Replacer(0x00000814, "XuiElementPlayNamedFrames"));
			add(new Replacer(0x00000815, "XuiElementGetPivot"));
			add(new Replacer(0x00000816, "XuiElementGetPrev"));
			add(new Replacer(0x00000817, "XuiElementGetScale"));
			add(new Replacer(0x00000818, "XuiElementSetPivot"));
			add(new Replacer(0x00000819, "XuiElementSetRotation"));
			add(new Replacer(0x0000081A, "XuiElementSetScale"));
			add(new Replacer(0x0000081B, "XuiControlWantsUnfocusedInput"));
			add(new Replacer(0x0000081C, "XuiResourceOpenNoLoc"));
			add(new Replacer(0x0000081D, "XuiResourceReleasePackage"));
			add(new Replacer(0x0000081E, "XuiResourceGetPackageEntryInfo"));
			add(new Replacer(0x0000081F, "XuiResourceGetPackageEntryCount"));
			add(new Replacer(0x00000820, "XuiResourceOpenPackage"));
			add(new Replacer(0x00000821, "XamCodeCoverageFileOpen"));
			add(new Replacer(0x00000822, "XamCodeCoverageFileClose"));
			add(new Replacer(0x00000823, "XamCodeCoverageFileLseek"));
			add(new Replacer(0x00000824, "XamCodeCoverageFileRead"));
			add(new Replacer(0x00000825, "XamCodeCoverageFileWrite"));
			add(new Replacer(0x00000826, "Refresh"));
			add(new Replacer(0x00000827, "XampHeapGetInfo"));
			add(new Replacer(0x00000828, "XampHeapGetCount"));
			add(new Replacer(0x00000829, "XamShowPamUI"));
			add(new Replacer(0x0000082A, "XuiElementLayoutTree"));
			add(new Replacer(0x0000082B, "XamRegisterScreenSaverCallback"));
			add(new Replacer(0x0000082C, "XUIElementPropVal_SetInt"));
			add(new Replacer(0x0000082D, "XUIElementPropVal_SetFloat"));
			add(new Replacer(0x0000082E, "XuiObjectGetPropertyDef"));
			add(new Replacer(0x0000082F, "XuiRenderGetDevice"));
			add(new Replacer(0x00000830, "XuiRenderRestoreState"));
			add(new Replacer(0x00000831, "XuiElementGetFullXForm"));
			add(new Replacer(0x00000832, "XuiRenderGetViewTransform"));
			add(new Replacer(0x00000833, "XuiRenderGetColorSpace"));
			add(new Replacer(0x00000834, "XamPngEncode"));
			add(new Replacer(0x00000835, "XamPngDecode"));
			add(new Replacer(0x00000836, "XamPngEncodeEx"));
			add(new Replacer(0x00000837, "XuiTextElementMeasureText"));
			add(new Replacer(0x00000838, "XamLoaderShouldConfirmReboot"));
			add(new Replacer(0x00000839, "XamLoaderRebootToDash"));
			add(new Replacer(0x0000083A, "XamNuiHudGetEngagedTrackingID"));
			add(new Replacer(0x0000083B, "XamLoaderLaunchTitleForReason"));
			add(new Replacer(0x0000083C, "XamNuiHudSetEngagedTrackingID"));
			add(new Replacer(0x0000083E, "XamSetupTexture"));
			add(new Replacer(0x00000841, "XamSetupCameraPreviewStuff"));
			add(new Replacer(0x00000842, "XamReleaseCameraPreviewStuff"));
			add(new Replacer(0x00000843, "XamRenderCameraPreviewStuff"));
			add(new Replacer(0x00000848, "XamAccountRecoveryGetSetTitleSyncTime"));
			add(new Replacer(0x00000849, "XamReadBiometricData"));
			add(new Replacer(0x0000084A, "XamWriteBiometricData"));
			add(new Replacer(0x0000084B, "XamD3DResourceDescriptorCreate"));
			add(new Replacer(0x0000084C, "XamD3DResourceDescriptorAddRef"));
			add(new Replacer(0x0000084D, "XamD3DResourceDescriptorRelease"));
			add(new Replacer(0x0000084E, "XamD3DResourceAddRef"));
			add(new Replacer(0x0000084F, "XamD3DResourceSet"));
			add(new Replacer(0x00000850, "XamD3DResourceIsBusy"));
			add(new Replacer(0x00000851, "XamD3DResourceRelease"));
			add(new Replacer(0x0000085E, "XamNuiEnableChatMic"));
			add(new Replacer(0x0000085F, "XamNuiIsChatMicEnabled"));
			add(new Replacer(0x00000860, "XamNuiGetDepthCalibration"));
			add(new Replacer(0x00000861, "XamNuiStoreDepthCalibration"));
			add(new Replacer(0x00000862, "XamUserNuiIsBiometricEnabled"));
			add(new Replacer(0x00000863, "XamUserNuiEnableBiometric"));
			add(new Replacer(0x00000864, "XamNuiCameraSetFlags"));
			add(new Replacer(0x00000865, "XamNuiCameraRememberFloor"));
			add(new Replacer(0x00000866, "XamUserNuiGetUserIndexForBind"));
			add(new Replacer(0x00000867, "XamUserNuiGetUserIndexForSignin"));
			add(new Replacer(0x00000868, "XamUserNuiBind"));
			add(new Replacer(0x00000869, "XamUserNuiGetUserIndex"));
			add(new Replacer(0x0000086A, "XamUserNuiGetEnrollmentIndex"));
			add(new Replacer(0x0000086B, "XamUserNuiUnbind"));
			add(new Replacer(0x0000086C, "XamNuiIdentityGetQualityFlagsMessage"));
			add(new Replacer(0x0000086D, "XamNuiCameraTiltSetCallback"));
			add(new Replacer(0x0000086E, "XamNuiHudIsEnabled"));
			add(new Replacer(0x0000086F, "XamNuiCameraGetTiltControllerType"));
			add(new Replacer(0x00000870, "XamNuiCameraTiltGetStatus"));
			add(new Replacer(0x00000871, "XamNuiIdentityGetQualityFlags"));
			add(new Replacer(0x00000872, "XamNuiIdentityEnrollForSignIn"));
			add(new Replacer(0x00000873, "XamNuiIdentityGetSessionId"));
			add(new Replacer(0x00000874, "XamNuiIdentityIdentifyWithBiometric"));
			add(new Replacer(0x00000875, "ControlPackGetHandleManager"));
			add(new Replacer(0x00000876, "XamEnableNuiAutomation"));
			add(new Replacer(0x00000877, "XamNuiGetSystemGestureControl"));
			add(new Replacer(0x00000878, "XamGetPasscodeKeyFromVirtualKey"));
			add(new Replacer(0x00000879, "XamEnableNatalPlayback"));
			add(new Replacer(0x0000087A, "XamIsNuiAutomationEnabled"));
			add(new Replacer(0x0000087B, "XamIsNatalPlaybackEnabled"));
			add(new Replacer(0x0000087C, "XamNuiHudInterpretFrame"));
			add(new Replacer(0x0000087D, "XamNuiHudEnableInputFilter"));
			add(new Replacer(0x0000087E, "ControlpackNuiCursorSetTrackingId"));
			add(new Replacer(0x0000087F, "XamNuiHudGetInitializeFlags"));
			add(new Replacer(0x00000880, "XamNuiCameraElevationSetAngle"));
			add(new Replacer(0x00000881, "XamNuiCameraElevationGetAngle"));
			add(new Replacer(0x00000882, "XamNuiCameraElevationAutoTilt"));
			add(new Replacer(0x00000883, "XamNuiCameraElevationStopMovement"));
			add(new Replacer(0x00000884, "XamNuiCameraElevationSetCallback"));
			add(new Replacer(0x00000885, "XamNuiGetDeviceStatus"));
			add(new Replacer(0x00000886, "XamNuiNatalCameraUpdateStarting"));
			add(new Replacer(0x00000887, "XamNuiNatalCameraUpdateComplete"));
			add(new Replacer(0x00000888, "XamNuiHudGetVersions"));
			add(new Replacer(0x00000889, "XamGetHUDElementByPath"));
			add(new Replacer(0x0000088A, "XamGetHUDElementByAutoId"));
			add(new Replacer(0x0000088B, "XuiElementGetScreenPositionCenter"));
			add(new Replacer(0x0000088C, "XamNuiCameraElevationReverseAutoTilt"));
			add(new Replacer(0x0000088D, "ControlPackSimpleCursorGetRayFromScreenPosition"));
			add(new Replacer(0x0000088E, "ControlPackSideNavControlGetNuiHandle"));
			add(new Replacer(0x0000088F, "XamFindHUDElementByXuiId"));
			add(new Replacer(0x00000890, "XamNuiIsDeviceReady"));
			add(new Replacer(0x00000891, "XamNuiSetForceDeviceOff"));
			add(new Replacer(0x00000892, "XamNuiPlayerEngagementUpdate"));
			add(new Replacer(0x00000893, "XamNuiSkeletonGetBestSkeletonIndex"));
			add(new Replacer(0x00000894, "XamNuiSkeletonScoreUpdate"));
			add(new Replacer(0x00000895, "XamNuiCameraTiltReportStatus"));
			add(new Replacer(0x00000896, "XamNuiCameraAdjustTilt"));
			add(new Replacer(0x00000898, "D3DDevice_CreateVertexShader"));
			add(new Replacer(0x00000899, "D3DDevice_CreatePixelShader"));
			add(new Replacer(0x0000089A, "D3DDevice_CreateTexture"));
			add(new Replacer(0x0000089B, "D3DDevice_CreateVertexBuffer"));
			add(new Replacer(0x0000089C, "D3DDevice_CreateIndexBuffer"));
			add(new Replacer(0x0000089D, "D3DDevice_CreateVertexDeclaration"));
			add(new Replacer(0x0000089E, "D3DVertexBuffer_Unlock"));
			add(new Replacer(0x0000089F, "D3DVertexBuffer_Lock"));
			add(new Replacer(0x000008A0, "D3DIndexBuffer_Unlock"));
			add(new Replacer(0x000008A1, "D3DIndexBuffer_Lock"));
			add(new Replacer(0x000008A2, "D3DTexture_UnlockRect"));
			add(new Replacer(0x000008A3, "D3DTexture_LockRect"));
			add(new Replacer(0x000008A4, "D3DDevice_Clear"));
			add(new Replacer(0x000008A5, "D3DDevice_SetViewport"));
			add(new Replacer(0x000008A6, "D3DDevice_GetViewport"));
			add(new Replacer(0x000008A7, "D3DVertexShader_Release"));
			add(new Replacer(0x000008A8, "D3DPixelShader_Release"));
			add(new Replacer(0x000008A9, "D3DVertexDeclaration_Release"));
			add(new Replacer(0x000008AA, "D3DResource_Release"));
			add(new Replacer(0x000008AB, "D3DDevice_Release"));
			add(new Replacer(0x000008AC, "D3DDevice_SetVertexShader"));
			add(new Replacer(0x000008AD, "D3DDevice_SetPixelShader"));
			add(new Replacer(0x000008AE, "D3DDevice_SetTexture"));
			add(new Replacer(0x000008AF, "D3DDevice_SetVertexDeclaration"));
			add(new Replacer(0x000008B0, "D3DDevice_SetIndices"));
			add(new Replacer(0x000008B1, "D3DDevice_SetStreamSource"));
			add(new Replacer(0x000008B2, "D3DDevice_DrawVertices"));
			add(new Replacer(0x000008B3, "D3DDevice_DrawVerticesUP"));
			add(new Replacer(0x000008B4, "D3DDevice_DrawIndexedVertices"));
			add(new Replacer(0x000008B5, "D3DDevice_DrawIndexedVerticesUP"));
			add(new Replacer(0x000008B6, "D3DDevice_SetVertexShaderConstantF_ParameterCheck"));
			add(new Replacer(0x000008B7, "D3DDevice_SetPixelShaderConstantF_ParameterCheck"));
			add(new Replacer(0x000008B8, "D3DDevice_SetSamplerState_ParameterCheck"));
			add(new Replacer(0x000008B9, "D3DDevice_SetRenderState_ParameterCheck"));
			add(new Replacer(0x000008BA, "D3DDevice_GetRenderState_ParameterCheck"));
			add(new Replacer(0x000008BB, "D3DDevice_SetVertexShaderConstantFN"));
			add(new Replacer(0x000008BC, "D3DDevice_SetPixelShaderConstantFN"));
			add(new Replacer(0x000008BD, "D3DDevice_GetRenderState_ZEnable"));
			add(new Replacer(0x000008BE, "D3DDevice_GetRenderState_CullMode"));
			add(new Replacer(0x000008BF, "D3DDevice_GetRenderState_AlphaBlendEnable"));
			add(new Replacer(0x000008C0, "D3DDevice_GetRenderState_SrcBlendAlpha"));
			add(new Replacer(0x000008C1, "D3DDevice_GetRenderState_DestBlendAlpha"));
			add(new Replacer(0x000008C2, "D3DDevice_GetRenderState_BlendOp"));
			add(new Replacer(0x000008C3, "D3DDevice_GetRenderState_ViewportEnable"));
			add(new Replacer(0x000008C4, "D3DDevice_SetRenderState_ZEnable"));
			add(new Replacer(0x000008C5, "D3DDevice_SetRenderState_CullMode"));
			add(new Replacer(0x000008C6, "D3DDevice_SetRenderState_AlphaBlendEnable"));
			add(new Replacer(0x000008C7, "D3DDevice_SetRenderState_SrcBlendAlpha"));
			add(new Replacer(0x000008C8, "D3DDevice_SetRenderState_DestBlendAlpha"));
			add(new Replacer(0x000008C9, "D3DDevice_SetRenderState_BlendOp"));
			add(new Replacer(0x000008CA, "D3DDevice_SetRenderState_ViewportEnable"));
			add(new Replacer(0x000008CB, "D3DDevice_SetSamplerState_MagFilter"));
			add(new Replacer(0x000008CC, "D3DDevice_SetSamplerState_MinFilter"));
			add(new Replacer(0x000008CD, "D3DDevice_SetSamplerState_AddressU"));
			add(new Replacer(0x000008CE, "D3DDevice_SetSamplerState_AddressV"));
			add(new Replacer(0x000008CF, "XGSetTextureHeader"));
			add(new Replacer(0x000008D0, "XGGetTextureDesc"));
			add(new Replacer(0x000008D1, "XGOffsetResourceAddress"));
			add(new Replacer(0x000008D2, "D3DResource_AddRef"));
			add(new Replacer(0x000008D3, "D3DVertexShader_AddRef"));
			add(new Replacer(0x000008D4, "D3DPixelShader_AddRef"));
			add(new Replacer(0x000008D5, "D3DVertexDeclaration_AddRef"));
			add(new Replacer(0x000008D6, "XGSetTextureHeaderEx"));
			add(new Replacer(0x000008D7, "D3DDevice_GetRenderTarget"));
			add(new Replacer(0x000008D8, "D3DDevice_SetRenderTarget"));
			add(new Replacer(0x000008D9, "D3DDevice_GetDepthStencilSurface"));
			add(new Replacer(0x000008DA, "D3DDevice_SetDepthStencilSurface"));
			add(new Replacer(0x000008DB, "D3DDevice_Resolve"));
			add(new Replacer(0x000008DC, "D3DDevice_SetPixelShaderConstantB"));
			add(new Replacer(0x000008DD, "XamNuiGetDeviceSerialNumber"));
			add(new Replacer(0x000008FC, "XamXtwManagerGetVariableCount"));
			add(new Replacer(0x000008FD, "XamXtwManagerGetId"));
			add(new Replacer(0x000008FE, "XamXtwManagerGetValue"));
			add(new Replacer(0x000008FF, "XamXtwManagerSetValue"));
			add(new Replacer(0x00000900, "XamXtwManagerIncrement"));
			add(new Replacer(0x00000901, "XamXtwManagerDecrement"));
			add(new Replacer(0x00000902, "XamXtwManagerResetValue"));
			add(new Replacer(0x00000903, "XamXtwManagerResetAll"));
			add(new Replacer(0x00000904, "XamXtwManagerGetDataFilePath"));
			add(new Replacer(0x00000905, "XamXtwManagerDeleteDataFile"));
			add(new Replacer(0x00000906, "XamXtwManagerSave"));
			add(new Replacer(0x00000907, "XamXtwManagerLoad"));
			add(new Replacer(0x00000908, "XamGetXTweakManager"));
			add(new Replacer(0x000009C4, "XamBackgroundDownloadSetMode"));
			add(new Replacer(0x000009C5, "XamBackgroundDownloadIsEnabled"));
			add(new Replacer(0x000009C6, "XamBackgroundDownloadGetActiveItem"));
			add(new Replacer(0x000009C7, "XamBackgroundDownloadGetItems"));
			add(new Replacer(0x000009C8, "XamBackgroundDownloadClearItems"));
			add(new Replacer(0x000009C9, "XamBackgroundDownloadItemAdd"));
			add(new Replacer(0x000009CA, "XamBackgroundDownloadItemRemove"));
			add(new Replacer(0x000009CB, "XamBackgroundDownloadItemMakeFirst"));
			add(new Replacer(0x000009CC, "XamBackgroundDownloadSetForegroundPriority"));
			add(new Replacer(0x000009CD, "XamBackgroundDownloadGetForegroundPriority"));
			add(new Replacer(0x000009CE, "XamBackgroundDownloadItemToContentData"));
			add(new Replacer(0x000009CF, "XamBackgroundDownloadItemGetStatus"));
			add(new Replacer(0x000009D0, "XamBackgroundDownloadHistoryGetItem"));
			add(new Replacer(0x000009D1, "XamBackgroundDownloadItemGetHistoryStatus"));
			add(new Replacer(0x000009D2, "XamBackgroundDownloadItemSetHistoryStatus"));
			add(new Replacer(0x000009D3, "XamBackgroundDownloadItemGetStatusAsync"));
			add(new Replacer(0x000009D4, "XamBackgroundDownloadItemGetStatusEx"));
			add(new Replacer(0x000009D5, "XamBackgroundDownloadItemGetHistoryStatusEx"));
			add(new Replacer(0x000009D6, "XamBackgroundDownloadBindItems"));
			add(new Replacer(0x000009D7, "XamBackgroundDownloadSetPollingActive"));
			add(new Replacer(0x000009D8, "XamBackgroundDownloadGetPollingActive"));
			add(new Replacer(0x000009D9, "XamBackgroundDownloadGetMode"));
			add(new Replacer(0x000009DA, "XamBackgroundDownloadGetUnexpectedChangeCount"));
			add(new Replacer(0x000009DB, "XamBackgroundDownloadIsItemForThisConsole"));
			add(new Replacer(0x000009DC, "XamBackgroundDownloadSelectDevice"));
			add(new Replacer(0x000009DD, "XamBackgroundDownloadItemModify"));
			add(new Replacer(0x000009DE, "XamBackgroundDownloadCacheLegacyMappingInfo"));
			add(new Replacer(0x000009DF, "XamBackgroundDownloadGetLegacyMappingInfo"));
			add(new Replacer(0x000009E0, "XamBackgroundDownloadGetLegacyId"));
			add(new Replacer(0x000009E1, "XamBackgroundDownloadDoFail"));
			add(new Replacer(0x00000A28, "XamSwapDisc"));
			add(new Replacer(0x00000A29, "XamSwapDiscPatchAddress"));
			add(new Replacer(0x00000A2A, "XamSwapCancel"));
			add(new Replacer(0x00000A32, "XamRamDriveCreate"));
			add(new Replacer(0x00000A33, "XamRamDriveDestroy"));
			add(new Replacer(0x00000A5A, "XamPlayTimerGetData"));
			add(new Replacer(0x00000A5B, "XamPlayTimerSetData"));
			add(new Replacer(0x00000A5C, "XamPlayTimerResume"));
			add(new Replacer(0x00000A5D, "XamPlayTimerSuspend"));
			add(new Replacer(0x00000A5E, "XamPlayTimerIsRunning"));
			add(new Replacer(0x00000A5F, "XamPlayTimerIsEnabled"));
			add(new Replacer(0x00000A60, "XamPlayTimerGetNextResetDate"));
			add(new Replacer(0x00000A61, "XamPlayTimerFormatDurationString"));
			add(new Replacer(0x00000A62, "XamPlayTimerGetTimeRemaining"));
			add(new Replacer(0x00000A63, "XamPlayTimerUpdateTimeRemaining"));
			add(new Replacer(0x00000A64, "XamPlayTimerForceNotification"));
			add(new Replacer(0x00000A65, "XamPlayTimerRefreshResetDate"));
			add(new Replacer(0x00000A6E, "UpnpAVServerSearchInitialize"));
			add(new Replacer(0x00000A6F, "UpnpAVServerSearchDestroy"));
			add(new Replacer(0x00000A70, "UpnpAVServerSearchStart"));
			add(new Replacer(0x00000A71, "Destroy"));
			add(new Replacer(0x00000A72, "UpnpAVServerSearchDoWork"));
			add(new Replacer(0x00000A73, "UpnpAVServerSearchGetNextServer"));
			add(new Replacer(0x00000A8C, "XCustomBroadcastGamercardEvent"));
			add(new Replacer(0x00000A8D, "XamCustomGetCurrentActions"));
			add(new Replacer(0x00000AA0, "XamInstrumentationLogEvent"));
			add(new Replacer(0x00000AA1, "XamRegisterSMCNotification"));
			add(new Replacer(0x00000AAA, "XamInstrumentationLogEventEx"));
			add(new Replacer(0x00000AAB, "XamInstrumentationGetSourceConfig"));
			add(new Replacer(0x00000AAC, "XamInstrumentationDebugConfig"));
			add(new Replacer(0x00000ADC, "CurlCreateCacheEntry"));
			add(new Replacer(0x00000ADD, "CurlOpenCacheEntry"));
			add(new Replacer(0x00000ADE, "CurlSetCacheEntryExpireTime"));
			add(new Replacer(0x00000ADF, "CurlReadCacheEntryHeaders"));
			add(new Replacer(0x00000AE0, "CurlReadCacheEntryContent"));
			add(new Replacer(0x00000AE1, "CurlWriteCacheEntryContent"));
			add(new Replacer(0x00000AE2, "CurlCloseCacheEntry"));
			add(new Replacer(0x00000AE3, "CurlEnumerateCacheEntry"));
			add(new Replacer(0x00000AE5, "CurlWipeBackingFiles"));
			add(new Replacer(0x00000AE7, "CurlOpenTitleBackingFile"));
			add(new Replacer(0x00000AF0, "XamSetSecurityViolationDetected"));
			add(new Replacer(0x00000AF1, "XamIsSecurityViolationDetected"));
			add(new Replacer(0x00000AF2, "XamIsAnySecurityViolationDetected"));
			add(new Replacer(0x00000AF3, "XamGetSecurityViolationsDetected"));
			add(new Replacer(0x00000AF4, "XamActivateCounterMeasure"));
			add(new Replacer(0x00000AF5, "XamDeactivateCounterMeasure"));
			add(new Replacer(0x00000AF6, "XamIsCounterMeasureActivated"));
			add(new Replacer(0x00000AF7, "XamGetActiveCounterMeasures"));
			add(new Replacer(0x00000AFC, "XamPartyCreate"));
			add(new Replacer(0x00000AFD, "XamPartyLeave"));
			add(new Replacer(0x00000AFE, "XamPartySendInviteDeprecated"));
			add(new Replacer(0x00000AFF, "XamPartyGetUserList"));
			add(new Replacer(0x00000B00, "XamPartySendGameInvites"));
			add(new Replacer(0x00000B01, "XamPartyJoin"));
			add(new Replacer(0x00000B02, "XamPartyKickUser"));
			add(new Replacer(0x00000B03, "XamPartyAddLocalUsers"));
			add(new Replacer(0x00000B04, "XamConvertEmoticons"));
			add(new Replacer(0x00000B05, "XamGetLocaleTimeFormat"));
			add(new Replacer(0x00000B06, "XamPartyRemoveLocalUsers"));
			add(new Replacer(0x00000B07, "XamPartyGetUserListInternal"));
			add(new Replacer(0x00000B08, "XamPartySetJoinable"));
			add(new Replacer(0x00000B09, "XamPartyGetJoinable"));
			add(new Replacer(0x00000B0A, "XamPartyGetInfo"));
			add(new Replacer(0x00000B0B, "XamPartySetCustomData"));
			add(new Replacer(0x00000B0C, "XamPartySetConnectivityGraph"));
			add(new Replacer(0x00000B0D, "XamPartyGetRoutingTable"));
			add(new Replacer(0x00000B0E, "XamPartyAutomationInprocCall"));
			add(new Replacer(0x00000B0F, "XamPartyGetState"));
			add(new Replacer(0x00000B10, "XamPartyGetBandwidth"));
			add(new Replacer(0x00000B11, "XamPartyGetNetworkCounters"));
			add(new Replacer(0x00000B12, "XamShowQuickLaunchUI"));
			add(new Replacer(0x00000B13, "XamPartyIsCoordinator"));
			add(new Replacer(0x00000B14, "XamPartyGetFormation"));
			add(new Replacer(0x00000B15, "XamPartySendInvite"));
			add(new Replacer(0x00000B16, "XamPartySetTestDelay"));
			add(new Replacer(0x00000B17, "XamPartyOverrideNatType"));
			add(new Replacer(0x00000B18, "XamPartyGetAccessLevel"));
			add(new Replacer(0x00000B19, "XamPartySetTestFlags"));
			add(new Replacer(0x00000B1A, "XamIsSystemExperienceTitleId"));
			add(new Replacer(0x00000B22, "XamTaskSetCancelSubTasks"));
			add(new Replacer(0x00000B23, "XamTaskGetCompletionStatus"));
			add(new Replacer(0x00000B24, "XamTaskCancelWaitAndCloseWaitTask"));
			add(new Replacer(0x00000B2C, "XamWebInstrumentationCreateReport"));
			add(new Replacer(0x00000B2D, "XamWebInstrumentationSetUserVar"));
			add(new Replacer(0x00000B2E, "XamWebInstrumentationSetUserVarNoEscape"));
			add(new Replacer(0x00000B2F, "XamWebInstrumentationGetURL"));
			add(new Replacer(0x00000B30, "XamWebInstrumentationSendReport"));
			add(new Replacer(0x00000B31, "XamWebInstrumentationDestroyReport"));
			add(new Replacer(0x00000B32, "XamWebInstrumentationCreateSampledReport"));
			add(new Replacer(0x00000B33, "XampSetSamplingRandomValue"));
			add(new Replacer(0x00000B34, "XampWebInstrumentationSetProfileCounts"));
			add(new Replacer(0x00000B35, "XamWebInstrumentationGetURLEx"));
			add(new Replacer(0x00000B36, "XampSetOmnitureCallbackFunction"));
			add(new Replacer(0x00000B37, "XamShowQuickChatUIp"));
			add(new Replacer(0x00000B4A, "XamVerifyXSignerSignature"));
		}
	};
	
	public static ArrayList<Replacer> xapi_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{						
			add(new Replacer(0x00000001, "XapiProcessHeap"));
			add(new Replacer(0x00000002, "_locktable"));
			add(new Replacer(0x00000003, "__tlsindexXapi"));
			add(new Replacer(0x00000004, "XapiTermHeapNoop"));
			add(new Replacer(0x00000005, "XapiDebugHeap"));
		}
	};	
	
	public static ArrayList<Replacer> xbdm_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{			
			add(new Replacer(0x00000001, "DmAllocatePool"));
			add(new Replacer(0x00000002, "DmAllocatePoolWithTag"));
			add(new Replacer(0x00000003, "DmCloseCounters"));
			add(new Replacer(0x00000004, "DmCloseModuleSections"));
			add(new Replacer(0x00000005, "DmCloseModuleSections"));
			add(new Replacer(0x00000006, "DmCloseNotificationSession"));
			add(new Replacer(0x00000007, "DmClosePerformanceCounter"));
			add(new Replacer(0x00000008, "DmContinueThread"));
			add(new Replacer(0x00000009, "DmFreePool"));
			add(new Replacer(0x0000000A, "DmGetMemory"));
			add(new Replacer(0x0000000B, "DmGetModuleLongName"));
			add(new Replacer(0x0000000C, "DmGetProcAddress"));
			add(new Replacer(0x0000000D, "DmGetThreadContext"));
			add(new Replacer(0x0000000F, "DmGetThreadList"));
			add(new Replacer(0x00000010, "DmGetXbeInfo"));
			add(new Replacer(0x00000011, "DmGetXboxName"));
			add(new Replacer(0x00000013, "DmGo"));
			add(new Replacer(0x00000014, "DmHaltThread"));
			add(new Replacer(0x00000015, "DmIsDebuggerPresent"));
			add(new Replacer(0x00000016, "DmIsThreadStopped"));
			add(new Replacer(0x00000017, "DmLoadExtension"));
			add(new Replacer(0x00000018, "DmNotify"));
			add(new Replacer(0x00000019, "DmOpenNotificationSession"));
			add(new Replacer(0x0000001A, "DmOpenPerformanceCounter"));
			add(new Replacer(0x0000001B, "DmQueryPerformanceCounterHandle"));
			add(new Replacer(0x0000001C, "DmReboot"));
			add(new Replacer(0x0000001E, "DmRegisterCommandProcessor"));
			add(new Replacer(0x00000020, "DmRegisterNotificationProcessor"));
			add(new Replacer(0x00000021, "DmRegisterPerformanceCounter"));
			add(new Replacer(0x00000022, "DmRemoveBreakpoint"));
			add(new Replacer(0x00000023, "DmResumeThread"));
			add(new Replacer(0x00000024, "DmSendNotificationString"));
			add(new Replacer(0x00000025, "DmSetBreakpoint"));
			add(new Replacer(0x00000026, "DmSetDataBreakpoint"));
			add(new Replacer(0x00000027, "DmSetInitialBreakpoint"));
			add(new Replacer(0x00000028, "DmSetMemory"));
			add(new Replacer(0x00000029, "DmSetThreadContext"));
			add(new Replacer(0x0000002A, "DmSetTitle"));
			add(new Replacer(0x0000002B, "DmSetXboxName"));
			add(new Replacer(0x0000002D, "DmStop"));
			add(new Replacer(0x0000002E, "DmStopOn"));
			add(new Replacer(0x00000030, "DmSuspendThread"));
			add(new Replacer(0x00000031, "DmThreadUserData"));
			add(new Replacer(0x00000032, "DmUnloadExtension"));
			add(new Replacer(0x00000033, "DmWalkLoadedModules"));
			add(new Replacer(0x00000034, "DmWalkModuleSections"));
			add(new Replacer(0x00000035, "DmWalkPerformanceCounters"));
			add(new Replacer(0x00000037, "DmCloseCounters"));
			add(new Replacer(0x00000038, "DmIsBreakpoint"));
			add(new Replacer(0x00000039, "DmCloseCounters"));
			add(new Replacer(0x0000003A, "DmSetUserAccess"));
			add(new Replacer(0x0000003B, "DmGetUserAccess"));
			add(new Replacer(0x0000003C, "DmWalkUserList"));
			add(new Replacer(0x0000003D, "DmAddUser"));
			add(new Replacer(0x0000003E, "DmEnableSecurity"));
			add(new Replacer(0x0000003F, "DmIsSecurityEnabled"));
			add(new Replacer(0x00000040, "DmRemoveUser"));
			add(new Replacer(0x00000041, "__CAP_Start_Profiling"));
			add(new Replacer(0x00000042, "__CAP_End_Profiling"));
			add(new Replacer(0x00000046, "__CAP_Enter_Function"));
			add(new Replacer(0x00000047, "__CAP_Exit_Function"));
			add(new Replacer(0x00000048, "DmRegisterCommandProcessorEx"));
			add(new Replacer(0x00000049, "DmStartProfiling"));
			add(new Replacer(0x0000004A, "DmStopProfiling"));
			add(new Replacer(0x0000004B, "DmQueryMemoryStatistics"));
			add(new Replacer(0x0000004C, "DmEnableStackTrace"));
			add(new Replacer(0x0000004D, "DmQueryAllocationTypeName"));
			add(new Replacer(0x0000004E, "DmRegisterAllocationType"));
			add(new Replacer(0x0000004F, "DmInsertAllocationEntry"));
			add(new Replacer(0x00000050, "DmRemoveAllocationEntry"));
			add(new Replacer(0x00000051, "DmSetTitleEx"));
			add(new Replacer(0x00000052, "DmCaptureStackBackTrace"));
			add(new Replacer(0x00000053, "DmCrashDump"));
			add(new Replacer(0x00000054, "DmIsFastCAPEnabled"));
			add(new Replacer(0x00000055, "DmGetFileAccessCount"));
			add(new Replacer(0x00000058, "DmGetUtilityDriveInfo"));
			add(new Replacer(0x00000059, "DmGetThreadInfoEx"));
			add(new Replacer(0x0000005A, "DmSetProfilingOptions"));
			add(new Replacer(0x0000005B, "DmQuerySystemSettings"));
			add(new Replacer(0x0000005C, "DmSaveSystemSettings"));
			add(new Replacer(0x0000006A, "DmpGetPgoModuleHandleForBaseAddress"));
			add(new Replacer(0x0000006B, "DmpOnPgoModuleLoad"));
			add(new Replacer(0x0000006C, "DmPgoStartDataCollection"));
			add(new Replacer(0x0000006D, "DmPgoStopDataCollection"));
			add(new Replacer(0x0000006E, "DmPgoSaveSnapshot"));
			add(new Replacer(0x0000006F, "IrtClientAbort"));
			add(new Replacer(0x00000070, "IrtPogoInit"));
			add(new Replacer(0x00000071, "IrtSetStaticInfo"));
			add(new Replacer(0x00000072, "IrtAutoSweepW"));
			add(new Replacer(0x00000073, "IrtAutoSweepA"));
			add(new Replacer(0x00000075, "DmGetDumpMode"));
			add(new Replacer(0x00000076, "DmSetDumpMode"));
			add(new Replacer(0x00000077, "DmGetDumpSettings"));
			add(new Replacer(0x00000078, "DmSetDumpSettings"));
			add(new Replacer(0x00000079, "DmGetEventDeferFlags"));
			add(new Replacer(0x0000007A, "DmSetEventDeferFlags"));
			add(new Replacer(0x0000007B, "DmWalkCommittedMemory"));
			add(new Replacer(0x0000007C, "DmCloseCounters"));
			add(new Replacer(0x0000007D, "DmRebootEx"));
			add(new Replacer(0x00000082, "DmMountFdfxVolume"));
			add(new Replacer(0x00000083, "DmCapGetFileHeader"));
			add(new Replacer(0x00000084, "DmCapFreeFileHeader"));
			add(new Replacer(0x00000085, "DmTraceStartRecording"));
			add(new Replacer(0x00000086, "DmTraceStartRecordingFunction"));
			add(new Replacer(0x00000087, "DmTraceSetBufferSize"));
			add(new Replacer(0x00000088, "DmTraceStopRecording"));
			add(new Replacer(0x00000089, "DmTraceSaveBuffer"));
			add(new Replacer(0x0000008C, "DmGetConsoleType"));
			add(new Replacer(0x0000008D, "DmMapDevkitDrive"));
			add(new Replacer(0x0000008E, "DmWalkLoadedModulesEx"));
			add(new Replacer(0x0000008F, "DmGetXexHeaderField"));
			add(new Replacer(0x00000090, "DmGetMouseChanges"));
			add(new Replacer(0x00000091, "DmFindPdbSignature"));
			add(new Replacer(0x00000092, "DmGetProfilingStatus"));
			add(new Replacer(0x00000093, "DmOpticalDiscLogStart"));
			add(new Replacer(0x00000094, "DmOpticalDiscLogStop"));
			add(new Replacer(0x00000095, "DmStartSamplingProfiler"));
			add(new Replacer(0x00000096, "DmStopSamplingProfiler"));
			add(new Replacer(0x00000097, "DmGetSamplingProfilerInfo"));
			add(new Replacer(0x00000098, "DmStartFileEventCapture"));
			add(new Replacer(0x00000099, "DmStopFileEventCapture"));
			add(new Replacer(0x0000009A, "DmSetFileEventMarker"));
			add(new Replacer(0x0000009B, "DmMarkPseudoCreateBegin"));
			add(new Replacer(0x0000009C, "DmMarkPseudoCreateEnd"));
			add(new Replacer(0x0000009D, "DmMarkPseudoEventBegin"));
			add(new Replacer(0x0000009E, "DmMarkPseudoEventEnd"));
			add(new Replacer(0x0000009F, "DmMarkFileEventWorkerThreadBegin"));
			add(new Replacer(0x000000A0, "DmMarkFileEventWorkerThreadEnd"));
			add(new Replacer(0x000000A1, "DmGetSystemInfo"));
			add(new Replacer(0x000000A2, "DmAbortProfiling"));
			add(new Replacer(0x000000A3, "DmNetCaptureStart"));
			add(new Replacer(0x000000A4, "DmNetCaptureStop"));
			add(new Replacer(0x000000A5, "DmQueryTitleMemoryStatistics"));
			add(new Replacer(0x000000A6, "DmAutomationGetInputProcess"));
			add(new Replacer(0x000000A7, "DmAutomationBindController"));
			add(new Replacer(0x000000A8, "DmAutomationUnbindController"));
			add(new Replacer(0x000000A9, "DmAutomationConnectController"));
			add(new Replacer(0x000000AA, "DmAutomationDisconnectController"));
			add(new Replacer(0x000000AB, "DmAutomationSetGamepadState"));
			add(new Replacer(0x000000AC, "DmAutomationQueueGamepadState"));
			add(new Replacer(0x000000AD, "DmAutomationClearGamepadQueue"));
			add(new Replacer(0x000000AE, "DmAutomationQueryGamepadQueue"));
			add(new Replacer(0x000000AF, "DmAutomationGetUserDefaultProfile"));
			add(new Replacer(0x000000B0, "DmAutomationSetUserDefaultProfile"));
			add(new Replacer(0x000000B1, "DmTraceIsRecording"));
			add(new Replacer(0x000000B2, "DmLoadDebuggerExtension"));
			add(new Replacer(0x000000B3, "DmUnloadDebuggerExtension"));
			add(new Replacer(0x000000B4, "DmCreateSystemThread"));
			add(new Replacer(0x000000B5, "PEPLELookup"));
			add(new Replacer(0x000000B6, "PEPLELookupCompact"));
			add(new Replacer(0x000000B7, "PVPLELookup"));
			add(new Replacer(0x000000B8, "PVPLELookupCompact"));
			add(new Replacer(0x000000B9, "PVPLELookupCompactMDS"));
			add(new Replacer(0x000000BA, "PVPLEFilteredLookup"));
			add(new Replacer(0x000000BB, "PVPLEFilteredLookupCompact"));
			add(new Replacer(0x000000BC, "PVPLEFilteredLookupCompactMDS"));
			add(new Replacer(0x000000BD, "PVPLETemplatedLookup"));
			add(new Replacer(0x000000BE, "PVPLETemplatedLookupCompact"));
			add(new Replacer(0x000000BF, "PVPLETemplatedLookupCompactMDS"));
			add(new Replacer(0x000000C0, "DmpPgoCounterOverflow"));
			add(new Replacer(0x000000C1, "UpdateMDSProbeState"));
			add(new Replacer(0x000000C2, "DmGetHttpRegistration"));
			add(new Replacer(0x000000C3, "DmTraceSetIOThread"));
			add(new Replacer(0x000000C4, "DmPMCInstallAndStart"));
			add(new Replacer(0x000000C5, "DmPMCStopAndReport"));
			add(new Replacer(0x000000C6, "DmPMCInstallSetup"));
			add(new Replacer(0x000000C7, "DmPMCUnInstallSetup"));
			add(new Replacer(0x000000C8, "DmPMCResetCounters"));
			add(new Replacer(0x000000C9, "DmPMCSetTriggerProcessor"));
			add(new Replacer(0x000000CA, "DmPMCStart"));
			add(new Replacer(0x000000CB, "DmPMCStop"));
			add(new Replacer(0x000000CC, "DmPMCGetCounter"));
			add(new Replacer(0x000000CD, "DmPMCGetCounters"));
			add(new Replacer(0x000000CE, "DmPMCGetCounterName"));
			add(new Replacer(0x000000CF, "DmPMCDumpCounters"));
			add(new Replacer(0x000000D0, "DmPMCDumpCountersVerbose"));
			add(new Replacer(0x000000D1, "DmPMCGetCounterCostEstimate"));
			add(new Replacer(0x000000D2, "DmPMCGetCounterSource"));
			add(new Replacer(0x000000D3, "DmPMCComputeFrequency"));
			add(new Replacer(0x000000D4, "DmGetAdditionalTitleMemorySetting"));
			add(new Replacer(0x000000D5, "DmGetDebugMemorySize"));
			add(new Replacer(0x000000D6, "DmGetConsoleDebugMemoryStatus"));
			add(new Replacer(0x000000D7, "DmNetSimSetLinkStatusHidden"));
			add(new Replacer(0x000000D8, "DmNetSimInsertQueue"));
			add(new Replacer(0x000000D9, "DmNetSimRemoveQueue"));
			add(new Replacer(0x000000DA, "DmNetSimRemoveAllQueues"));
			add(new Replacer(0x000000DB, "DmNetSimModifyQueueSettings"));
			add(new Replacer(0x000000DC, "DmGetConsoleFeatures"));
			add(new Replacer(0x000000DD, "DmNetSimGetQueueStats"));
			add(new Replacer(0x000000DE, "DmNetSimGetQueueSettings"));
			add(new Replacer(0x000000DF, "DmNetSimGetNumQueues"));
			add(new Replacer(0x000000E0, "DmNetSimInsertIpv4Redirect"));
			add(new Replacer(0x000000E1, "DmNetSimRemoveIpv4Redirect"));
			add(new Replacer(0x000000E2, "DmNetSimGetNumIpv4Redirects"));
			add(new Replacer(0x0000012C, "XLFAllocate"));
			add(new Replacer(0x0000012D, "XLFFree"));
			add(new Replacer(0x0000012E, "XLFQueueAdd"));
			add(new Replacer(0x0000012F, "XLFQueueAllocated"));
			add(new Replacer(0x00000130, "XLFQueueCreate"));
			add(new Replacer(0x00000131, "XLFQueueDestroy"));
			add(new Replacer(0x00000132, "XLFQueueGetEntryCount"));
			add(new Replacer(0x00000133, "XLFQueueIsEmpty"));
			add(new Replacer(0x00000134, "XLFQueueRemove"));
			add(new Replacer(0x00000135, "XLFQueueUnsafeDump"));
			add(new Replacer(0x00000136, "XLFStackAllocated"));
			add(new Replacer(0x00000137, "XLFStackCreate"));
			add(new Replacer(0x00000138, "XLFStackDestroy"));
			add(new Replacer(0x00000139, "XLFStackGetEntryCount"));
			add(new Replacer(0x0000013A, "XLFStackIsEmpty"));
			add(new Replacer(0x0000013B, "XLFStackPop"));
			add(new Replacer(0x0000013C, "XLFStackPush"));
			add(new Replacer(0x0000013D, "XLFStackUnsafeDump"));
			add(new Replacer(0x00000140, "XLFPriorityQueueAdd"));
			add(new Replacer(0x00000141, "XLFPriorityQueueAllocated"));
			add(new Replacer(0x00000142, "XLFPriorityQueueCreate"));
			add(new Replacer(0x00000143, "XLFPriorityQueueDestroy"));
			add(new Replacer(0x00000144, "XLFPriorityQueueGetEntryCount"));
			add(new Replacer(0x00000145, "XLFPriorityQueueIsEmpty"));
			add(new Replacer(0x00000146, "XLFPriorityQueueRemoveFirst"));
			add(new Replacer(0x00000147, "XLFPriorityQueueRemove"));
			add(new Replacer(0x00000148, "XLFPriorityQueueUnsafeDump"));
			add(new Replacer(0x0000014A, "XLFHashTableAdd"));
			add(new Replacer(0x0000014B, "XLFHashTableAllocated"));
			add(new Replacer(0x0000014C, "XLFHashTableCreate"));
			add(new Replacer(0x0000014D, "XLFHashTableDestroy"));
			add(new Replacer(0x0000014E, "XLFHashTableGetEntryCount"));
			add(new Replacer(0x0000014F, "XLFHashTableIsEmpty"));
			add(new Replacer(0x00000150, "XLFHashTableRemoveFirst"));
			add(new Replacer(0x00000151, "XLFHashTableRemove"));
			add(new Replacer(0x00000152, "XLFHashTableUnsafeDump"));
			add(new Replacer(0x00000154, "XLFPoolAcquireLock"));
			add(new Replacer(0x00000155, "XLFPoolAllocated"));
			add(new Replacer(0x00000156, "XLFPoolCreate"));
			add(new Replacer(0x00000157, "XLFPoolCreateLock"));
			add(new Replacer(0x00000158, "XLFPoolDestroy"));
			add(new Replacer(0x00000159, "XLFPoolDestroyLock"));
			add(new Replacer(0x0000015A, "XLFPoolIncreaseEvents"));
			add(new Replacer(0x0000015B, "XLFPoolIncreaseLocks"));
			add(new Replacer(0x0000015C, "XLFPoolInitializeLock"));
			add(new Replacer(0x0000015D, "XLFPoolNumberOfEvents"));
			add(new Replacer(0x0000015E, "XLFPoolNumberOfLocks"));
			add(new Replacer(0x0000015F, "XLFPoolReleaseLock"));
			add(new Replacer(0x00000163, "XLFStartLog"));
			add(new Replacer(0x00000164, "XLFStartUserLog"));
			add(new Replacer(0x00000165, "XLFInitializeLog"));
			add(new Replacer(0x00000166, "XLFInitializeUserLog"));
			add(new Replacer(0x00000168, "XLFEndLog"));
			add(new Replacer(0x00000169, "XLFLogPrint"));
			add(new Replacer(0x0000016A, "XLFLogPrintV"));
			add(new Replacer(0x0000016B, "XLFLogBuffer"));
			add(new Replacer(0x0000016C, "XLFLogMessageStats"));
			add(new Replacer(0x00000172, "XLockFreeGetErrorHandler"));
			add(new Replacer(0x00000173, "XLockFreeSetErrorHandler"));
		}
	};
	
	public static ArrayList<Replacer> xboxkrnl_replacer = new ArrayList<ImportRenamer.Replacer>(){
		{
			add(new Replacer(0x00000001, "DbgBreakPoint"));
			add(new Replacer(0x00000002, "DbgBreakPointWithStatus"));
			add(new Replacer(0x00000003, "DbgPrint"));
			add(new Replacer(0x00000004, "DbgPrompt"));
			add(new Replacer(0x00000005, "DumpGetRawDumpInfo"));
			add(new Replacer(0x00000006, "DumpWriteDump"));
			add(new Replacer(0x00000007, "ExAcquireReadWriteLockExclusive"));
			add(new Replacer(0x00000008, "ExAcquireReadWriteLockShared"));
			add(new Replacer(0x00000009, "ExAllocatePool"));
			add(new Replacer(0x0000000A, "ExAllocatePoolWithTag"));
			add(new Replacer(0x0000000B, "ExAllocatePoolTypeWithTag"));
			add(new Replacer(0x0000000C, "ExConsoleGameRegion"));
			add(new Replacer(0x0000000D, "ExCreateThread"));
			add(new Replacer(0x0000000E, "ExEventObjectType"));
			add(new Replacer(0x0000000F, "ExFreePool"));
			add(new Replacer(0x00000010, "ExGetXConfigSetting"));
			add(new Replacer(0x00000011, "ExInitializeReadWriteLock"));
			add(new Replacer(0x00000012, "ExMutantObjectType"));
			add(new Replacer(0x00000013, "ExQueryPoolBlockSize"));
			add(new Replacer(0x00000014, "ExRegisterThreadNotification"));
			add(new Replacer(0x00000015, "ExRegisterTitleTerminateNotification"));
			add(new Replacer(0x00000016, "ExReleaseReadWriteLock"));
			add(new Replacer(0x00000017, "ExSemaphoreObjectType"));
			add(new Replacer(0x00000018, "ExSetXConfigSetting"));
			add(new Replacer(0x00000019, "ExTerminateThread"));
			add(new Replacer(0x0000001A, "ExTerminateTitleProcess"));
			add(new Replacer(0x0000001B, "ExThreadObjectType"));
			add(new Replacer(0x0000001C, "ExTimerObjectType"));
			add(new Replacer(0x0000001D, "MmDoubleMapMemory"));
			add(new Replacer(0x0000001E, "MmUnmapMemory"));
			add(new Replacer(0x0000001F, "XeKeysGetConsoleCertificate"));
			add(new Replacer(0x00000020, "FscGetCacheElementCount"));
			add(new Replacer(0x00000021, "FscSetCacheElementCount"));
			add(new Replacer(0x00000022, "HalGetCurrentAVPack"));
			add(new Replacer(0x00000023, "HalGpioControl"));
			add(new Replacer(0x00000024, "HalOpenCloseODDTray"));
			add(new Replacer(0x00000025, "HalReadWritePCISpace"));
			add(new Replacer(0x00000026, "HalRegisterPowerDownNotification"));
			add(new Replacer(0x00000027, "HalRegisterSMCNotification"));
			add(new Replacer(0x00000028, "HalReturnToFirmware"));
			add(new Replacer(0x00000029, "HalSendSMCMessage"));
			add(new Replacer(0x0000002A, "HalSetAudioEnable"));
			add(new Replacer(0x0000002B, "InterlockedFlushSList"));
			add(new Replacer(0x0000002C, "InterlockedPopEntrySList"));
			add(new Replacer(0x0000002D, "InterlockedPushEntrySList"));
			add(new Replacer(0x0000002E, "IoAcquireDeviceObjectLock"));
			add(new Replacer(0x0000002F, "IoAllocateIrp"));
			add(new Replacer(0x00000030, "IoBuildAsynchronousFsdRequest"));
			add(new Replacer(0x00000031, "IoBuildDeviceIoControlRequest"));
			add(new Replacer(0x00000032, "IoBuildSynchronousFsdRequest"));
			add(new Replacer(0x00000033, "IoCallDriver"));
			add(new Replacer(0x00000034, "IoCheckShareAccess"));
			add(new Replacer(0x00000035, "IoCompleteRequest"));
			add(new Replacer(0x00000036, "IoCompletionObjectType"));
			add(new Replacer(0x00000037, "IoCreateDevice"));
			add(new Replacer(0x00000038, "IoCreateFile"));
			add(new Replacer(0x00000039, "IoDeleteDevice"));
			add(new Replacer(0x0000003A, "IoDeviceObjectType"));
			add(new Replacer(0x0000003B, "IoDismountVolume"));
			add(new Replacer(0x0000003C, "IoDismountVolumeByFileHandle"));
			add(new Replacer(0x0000003D, "IoDismountVolumeByName"));
			add(new Replacer(0x0000003E, "IoFileObjectType"));
			add(new Replacer(0x0000003F, "IoFreeIrp"));
			add(new Replacer(0x00000040, "IoInitializeIrp"));
			add(new Replacer(0x00000041, "IoInvalidDeviceRequest"));
			add(new Replacer(0x00000042, "ExSetBetaFeaturesEnabled"));
			add(new Replacer(0x00000043, "IoQueueThreadIrp"));
			add(new Replacer(0x00000044, "IoReleaseDeviceObjectLock"));
			add(new Replacer(0x00000045, "IoRemoveShareAccess"));
			add(new Replacer(0x00000046, "IoSetIoCompletion"));
			add(new Replacer(0x00000047, "IoSetShareAccess"));
			add(new Replacer(0x00000048, "IoStartNextPacket"));
			add(new Replacer(0x00000049, "IoStartNextPacketByKey"));
			add(new Replacer(0x0000004A, "IoStartPacket"));
			add(new Replacer(0x0000004B, "IoSynchronousDeviceIoControlRequest"));
			add(new Replacer(0x0000004C, "IoSynchronousFsdRequest"));
			add(new Replacer(0x0000004D, "KeAcquireSpinLockAtRaisedIrql"));
			add(new Replacer(0x0000004E, "KeAlertResumeThread"));
			add(new Replacer(0x0000004F, "KeAlertThread"));
			add(new Replacer(0x00000050, "KeBlowFuses"));
			add(new Replacer(0x00000051, "KeBoostPriorityThread"));
			add(new Replacer(0x00000052, "KeBugCheck"));
			add(new Replacer(0x00000053, "KeBugCheckEx"));
			add(new Replacer(0x00000054, "KeCancelTimer"));
			add(new Replacer(0x00000055, "KeConnectInterrupt"));
			add(new Replacer(0x00000056, "KeContextFromKframes"));
			add(new Replacer(0x00000057, "KeContextToKframes"));
			add(new Replacer(0x00000058, "KeCreateUserMode"));
			add(new Replacer(0x00000059, "KeDebugMonitorData"));
			add(new Replacer(0x0000005A, "KeDelayExecutionThread"));
			add(new Replacer(0x0000005B, "KeDeleteUserMode"));
			add(new Replacer(0x0000005C, "KeDisconnectInterrupt"));
			add(new Replacer(0x0000005D, "KeEnableFpuExceptions"));
			add(new Replacer(0x0000005E, "KeEnablePPUPerformanceMonitor"));
			add(new Replacer(0x0000005F, "KeEnterCriticalRegion"));
			add(new Replacer(0x00000060, "KeEnterUserMode"));
			add(new Replacer(0x00000061, "KeFlushCacheRange"));
			add(new Replacer(0x00000062, "KeFlushCurrentEntireTb"));
			add(new Replacer(0x00000063, "KeFlushEntireTb"));
			add(new Replacer(0x00000064, "KeFlushUserModeCurrentTb"));
			add(new Replacer(0x00000065, "KeFlushUserModeTb"));
			add(new Replacer(0x00000066, "KeGetCurrentProcessType"));
			add(new Replacer(0x00000067, "KeGetPMWRegister"));
			add(new Replacer(0x00000068, "KeGetPRVRegister"));
			add(new Replacer(0x00000069, "KeGetSocRegister"));
			add(new Replacer(0x0000006A, "KeGetSpecialPurposeRegister"));
			add(new Replacer(0x0000006B, "KeLockL2"));
			add(new Replacer(0x0000006C, "KeUnlockL2"));
			add(new Replacer(0x0000006D, "KeInitializeApc"));
			add(new Replacer(0x0000006E, "KeInitializeDeviceQueue"));
			add(new Replacer(0x0000006F, "KeInitializeDpc"));
			add(new Replacer(0x00000070, "KeInitializeEvent"));
			add(new Replacer(0x00000071, "KeInitializeInterrupt"));
			add(new Replacer(0x00000072, "KeInitializeMutant"));
			add(new Replacer(0x00000073, "KeInitializeQueue"));
			add(new Replacer(0x00000074, "KeInitializeSemaphore"));
			add(new Replacer(0x00000075, "KeInitializeTimerEx"));
			add(new Replacer(0x00000076, "KeInsertByKeyDeviceQueue"));
			add(new Replacer(0x00000077, "KeInsertDeviceQueue"));
			add(new Replacer(0x00000078, "KeInsertHeadQueue"));
			add(new Replacer(0x00000079, "KeInsertQueue"));
			add(new Replacer(0x0000007A, "KeInsertQueueApc"));
			add(new Replacer(0x0000007B, "KeInsertQueueDpc"));
			add(new Replacer(0x0000007C, "KeIpiGenericCall"));
			add(new Replacer(0x0000007D, "KeLeaveCriticalRegion"));
			add(new Replacer(0x0000007E, "KeLeaveUserMode"));
			add(new Replacer(0x0000007F, "KePulseEvent"));
			add(new Replacer(0x00000080, "KeQueryBackgroundProcessors"));
			add(new Replacer(0x00000081, "KeQueryBasePriorityThread"));
			add(new Replacer(0x00000082, "KeQueryInterruptTime"));
			add(new Replacer(0x00000083, "KeQueryPerformanceFrequency"));
			add(new Replacer(0x00000084, "KeQuerySystemTime"));
			add(new Replacer(0x00000085, "KeRaiseIrqlToDpcLevel"));
			add(new Replacer(0x00000086, "KeRegisterDriverNotification"));
			add(new Replacer(0x00000087, "KeReleaseMutant"));
			add(new Replacer(0x00000088, "KeReleaseSemaphore"));
			add(new Replacer(0x00000089, "KeReleaseSpinLockFromRaisedIrql"));
			add(new Replacer(0x0000008A, "KeRemoveByKeyDeviceQueue"));
			add(new Replacer(0x0000008B, "KeRemoveDeviceQueue"));
			add(new Replacer(0x0000008C, "KeRemoveEntryDeviceQueue"));
			add(new Replacer(0x0000008D, "KeRemoveQueue"));
			add(new Replacer(0x0000008E, "KeRemoveQueueDpc"));
			add(new Replacer(0x0000008F, "KeResetEvent"));
			add(new Replacer(0x00000090, "KeRestoreFloatingPointState"));
			add(new Replacer(0x00000091, "KeRestoreVectorUnitState"));
			add(new Replacer(0x00000092, "KeResumeThread"));
			add(new Replacer(0x00000093, "KeRetireDpcList"));
			add(new Replacer(0x00000094, "KeRundownQueue"));
			add(new Replacer(0x00000095, "KeSaveFloatingPointState"));
			add(new Replacer(0x00000096, "KeSaveVectorUnitState"));
			add(new Replacer(0x00000097, "KeSetAffinityThread"));
			add(new Replacer(0x00000098, "KeSetBackgroundProcessors"));
			add(new Replacer(0x00000099, "KeSetBasePriorityThread"));
			add(new Replacer(0x0000009A, "KeSetCurrentProcessType"));
			add(new Replacer(0x0000009B, "KeSetCurrentStackPointers"));
			add(new Replacer(0x0000009C, "KeSetDisableBoostThread"));
			add(new Replacer(0x0000009D, "KeSetEvent"));
			add(new Replacer(0x0000009E, "KeSetEventBoostPriority"));
			add(new Replacer(0x0000009F, "KeSetPMWRegister"));
			add(new Replacer(0x000000A0, "KeSetPowerMode"));
			add(new Replacer(0x000000A1, "KeSetPRVRegister"));
			add(new Replacer(0x000000A2, "KeSetPriorityClassThread"));
			add(new Replacer(0x000000A3, "KeSetPriorityThread"));
			add(new Replacer(0x000000A4, "KeSetSocRegister"));
			add(new Replacer(0x000000A5, "KeSetSpecialPurposeRegister"));
			add(new Replacer(0x000000A6, "KeSetTimer"));
			add(new Replacer(0x000000A7, "KeSetTimerEx"));
			add(new Replacer(0x000000A8, "KeStallExecutionProcessor"));
			add(new Replacer(0x000000A9, "KeSuspendThread"));
			add(new Replacer(0x000000AA, "KeSweepDcacheRange"));
			add(new Replacer(0x000000AB, "KeSweepIcacheRange"));
			add(new Replacer(0x000000AC, "KeTestAlertThread"));
			add(new Replacer(0x000000AD, "KeTimeStampBundle"));
			add(new Replacer(0x000000AE, "KeTryToAcquireSpinLockAtRaisedIrql"));
			add(new Replacer(0x000000AF, "KeWaitForMultipleObjects"));
			add(new Replacer(0x000000B0, "KeWaitForSingleObject"));
			add(new Replacer(0x000000B1, "KfAcquireSpinLock"));
			add(new Replacer(0x000000B2, "KfRaiseIrql"));
			add(new Replacer(0x000000B3, "KfLowerIrql"));
			add(new Replacer(0x000000B4, "KfReleaseSpinLock"));
			add(new Replacer(0x000000B5, "KiBugCheckData"));
			add(new Replacer(0x000000B6, "LDICreateDecompression"));
			add(new Replacer(0x000000B7, "LDIDecompress"));
			add(new Replacer(0x000000B8, "LDIDestroyDecompression"));
			add(new Replacer(0x000000B9, "MmAllocatePhysicalMemory"));
			add(new Replacer(0x000000BA, "MmAllocatePhysicalMemoryEx"));
			add(new Replacer(0x000000BB, "MmCreateKernelStack"));
			add(new Replacer(0x000000BC, "MmDeleteKernelStack"));
			add(new Replacer(0x000000BD, "MmFreePhysicalMemory"));
			add(new Replacer(0x000000BE, "MmGetPhysicalAddress"));
			add(new Replacer(0x000000BF, "MmIsAddressValid"));
			add(new Replacer(0x000000C0, "MmLockAndMapSegmentArray"));
			add(new Replacer(0x000000C1, "MmLockUnlockBufferPages"));
			add(new Replacer(0x000000C2, "MmMapIoSpace"));
			add(new Replacer(0x000000C3, "MmPersistPhysicalMemoryAllocation"));
			add(new Replacer(0x000000C4, "MmQueryAddressProtect"));
			add(new Replacer(0x000000C5, "MmQueryAllocationSize"));
			add(new Replacer(0x000000C6, "MmQueryStatistics"));
			add(new Replacer(0x000000C7, "MmSetAddressProtect"));
			add(new Replacer(0x000000C8, "MmSplitPhysicalMemoryAllocation"));
			add(new Replacer(0x000000C9, "MmUnlockAndUnmapSegmentArray"));
			add(new Replacer(0x000000CA, "MmUnmapIoSpace"));
			add(new Replacer(0x000000CB, "Nls844UnicodeCaseTable"));
			add(new Replacer(0x000000CC, "NtAllocateVirtualMemory"));
			add(new Replacer(0x000000CD, "NtCancelTimer"));
			add(new Replacer(0x000000CE, "NtClearEvent"));
			add(new Replacer(0x000000CF, "NtClose"));
			add(new Replacer(0x000000D0, "NtCreateDirectoryObject"));
			add(new Replacer(0x000000D1, "NtCreateEvent"));
			add(new Replacer(0x000000D2, "NtCreateFile"));
			add(new Replacer(0x000000D3, "NtCreateIoCompletion"));
			add(new Replacer(0x000000D4, "NtCreateMutant"));
			add(new Replacer(0x000000D5, "NtCreateSemaphore"));
			add(new Replacer(0x000000D6, "NtCreateSymbolicLinkObject"));
			add(new Replacer(0x000000D7, "NtCreateTimer"));
			add(new Replacer(0x000000D8, "NtDeleteFile"));
			add(new Replacer(0x000000D9, "NtDeviceIoControlFile"));
			add(new Replacer(0x000000DA, "NtDuplicateObject"));
			add(new Replacer(0x000000DB, "NtFlushBuffersFile"));
			add(new Replacer(0x000000DC, "NtFreeVirtualMemory"));
			add(new Replacer(0x000000DD, "NtMakeTemporaryObject"));
			add(new Replacer(0x000000DE, "NtOpenDirectoryObject"));
			add(new Replacer(0x000000DF, "NtOpenFile"));
			add(new Replacer(0x000000E0, "NtOpenSymbolicLinkObject"));
			add(new Replacer(0x000000E1, "NtProtectVirtualMemory"));
			add(new Replacer(0x000000E2, "NtPulseEvent"));
			add(new Replacer(0x000000E3, "NtQueueApcThread"));
			add(new Replacer(0x000000E4, "NtQueryDirectoryFile"));
			add(new Replacer(0x000000E5, "NtQueryDirectoryObject"));
			add(new Replacer(0x000000E6, "NtQueryEvent"));
			add(new Replacer(0x000000E7, "NtQueryFullAttributesFile"));
			add(new Replacer(0x000000E8, "NtQueryInformationFile"));
			add(new Replacer(0x000000E9, "NtQueryIoCompletion"));
			add(new Replacer(0x000000EA, "NtQueryMutant"));
			add(new Replacer(0x000000EB, "NtQuerySemaphore"));
			add(new Replacer(0x000000EC, "NtQuerySymbolicLinkObject"));
			add(new Replacer(0x000000ED, "NtQueryTimer"));
			add(new Replacer(0x000000EE, "NtQueryVirtualMemory"));
			add(new Replacer(0x000000EF, "NtQueryVolumeInformationFile"));
			add(new Replacer(0x000000F0, "NtReadFile"));
			add(new Replacer(0x000000F1, "NtReadFileScatter"));
			add(new Replacer(0x000000F2, "NtReleaseMutant"));
			add(new Replacer(0x000000F3, "NtReleaseSemaphore"));
			add(new Replacer(0x000000F4, "NtRemoveIoCompletion"));
			add(new Replacer(0x000000F5, "NtResumeThread"));
			add(new Replacer(0x000000F6, "NtSetEvent"));
			add(new Replacer(0x000000F7, "NtSetInformationFile"));
			add(new Replacer(0x000000F8, "NtSetIoCompletion"));
			add(new Replacer(0x000000F9, "NtSetSystemTime"));
			add(new Replacer(0x000000FA, "NtSetTimerEx"));
			add(new Replacer(0x000000FB, "NtSignalAndWaitForSingleObjectEx"));
			add(new Replacer(0x000000FC, "NtSuspendThread"));
			add(new Replacer(0x000000FD, "NtWaitForSingleObjectEx"));
			add(new Replacer(0x000000FE, "NtWaitForMultipleObjectsEx"));
			add(new Replacer(0x000000FF, "NtWriteFile"));
			add(new Replacer(0x00000100, "NtWriteFileGather"));
			add(new Replacer(0x00000101, "NtYieldExecution"));
			add(new Replacer(0x00000102, "ObCreateObject"));
			add(new Replacer(0x00000103, "ObCreateSymbolicLink"));
			add(new Replacer(0x00000104, "ObDeleteSymbolicLink"));
			add(new Replacer(0x00000105, "ObDereferenceObject"));
			add(new Replacer(0x00000106, "ObDirectoryObjectType"));
			add(new Replacer(0x00000107, "ObGetWaitableObject"));
			add(new Replacer(0x00000108, "ObInsertObject"));
			add(new Replacer(0x00000109, "ObIsTitleObject"));
			add(new Replacer(0x0000010A, "ObLookupAnyThreadByThreadId"));
			add(new Replacer(0x0000010B, "ObLookupThreadByThreadId"));
			add(new Replacer(0x0000010C, "ObMakeTemporaryObject"));
			add(new Replacer(0x0000010D, "ObOpenObjectByName"));
			add(new Replacer(0x0000010E, "ObOpenObjectByPointer"));
			add(new Replacer(0x0000010F, "ObReferenceObject"));
			add(new Replacer(0x00000110, "ObReferenceObjectByHandle"));
			add(new Replacer(0x00000111, "ObReferenceObjectByName"));
			add(new Replacer(0x00000112, "ObSymbolicLinkObjectType"));
			add(new Replacer(0x00000113, "ObTranslateSymbolicLink"));
			add(new Replacer(0x00000114, "RtlAnsiStringToUnicodeString"));
			add(new Replacer(0x00000115, "RtlAppendStringToString"));
			add(new Replacer(0x00000116, "RtlAppendUnicodeStringToString"));
			add(new Replacer(0x00000117, "RtlAppendUnicodeToString"));
			add(new Replacer(0x00000118, "RtlAssert"));
			add(new Replacer(0x00000119, "RtlCaptureContext"));
			add(new Replacer(0x0000011A, "RtlCompareMemory"));
			add(new Replacer(0x0000011B, "RtlCompareMemoryUlong"));
			add(new Replacer(0x0000011C, "RtlCompareString"));
			add(new Replacer(0x0000011D, "RtlCompareStringN"));
			add(new Replacer(0x0000011E, "RtlCompareUnicodeString"));
			add(new Replacer(0x0000011F, "RtlCompareUnicodeStringN"));
			add(new Replacer(0x00000120, "RtlCompareUtf8ToUnicode"));
			add(new Replacer(0x00000121, "RtlCopyString"));
			add(new Replacer(0x00000122, "RtlCopyUnicodeString"));
			add(new Replacer(0x00000123, "RtlCreateUnicodeString"));
			add(new Replacer(0x00000124, "RtlDowncaseUnicodeChar"));
			add(new Replacer(0x00000125, "RtlEnterCriticalSection"));
			add(new Replacer(0x00000126, "RtlFillMemoryUlong"));
			add(new Replacer(0x00000127, "RtlFreeAnsiString"));
			add(new Replacer(0x00000128, "RtlFreeAnsiString"));
			add(new Replacer(0x00000129, "RtlGetCallersAddress"));
			add(new Replacer(0x0000012A, "RtlGetStackLimits"));
			add(new Replacer(0x0000012B, "RtlImageXexHeaderField"));
			add(new Replacer(0x0000012C, "RtlInitAnsiString"));
			add(new Replacer(0x0000012D, "RtlInitUnicodeString"));
			add(new Replacer(0x0000012E, "RtlInitializeCriticalSection"));
			add(new Replacer(0x0000012F, "RtlInitializeCriticalSectionAndSpinCount"));
			add(new Replacer(0x00000130, "RtlLeaveCriticalSection"));
			add(new Replacer(0x00000131, "RtlLookupFunctionEntry"));
			add(new Replacer(0x00000132, "RtlLowerChar"));
			add(new Replacer(0x00000133, "RtlMultiByteToUnicodeN"));
			add(new Replacer(0x00000134, "RtlMultiByteToUnicodeSize"));
			add(new Replacer(0x00000135, "RtlNtStatusToDosError"));
			add(new Replacer(0x00000136, "RtlRaiseException"));
			add(new Replacer(0x00000137, "RtlRaiseStatus"));
			add(new Replacer(0x00000138, "RtlRip"));
			add(new Replacer(0x00000139, "_scprintf"));
			add(new Replacer(0x0000013A, "_snprintf"));
			add(new Replacer(0x0000013B, "sprintf"));
			add(new Replacer(0x0000013C, "_scwprintf"));
			add(new Replacer(0x0000013D, "_snwprintf"));
			add(new Replacer(0x0000013E, "_swprintf"));
			add(new Replacer(0x0000013F, "RtlTimeFieldsToTime"));
			add(new Replacer(0x00000140, "RtlTimeToTimeFields"));
			add(new Replacer(0x00000141, "RtlTryEnterCriticalSection"));
			add(new Replacer(0x00000142, "RtlUnicodeStringToAnsiString"));
			add(new Replacer(0x00000143, "RtlUnicodeToMultiByteN"));
			add(new Replacer(0x00000144, "RtlUnicodeToMultiByteSize"));
			add(new Replacer(0x00000145, "RtlUnicodeToUtf8"));
			add(new Replacer(0x00000146, "RtlUnicodeToUtf8Size"));
			add(new Replacer(0x00000147, "RtlUnwind"));
			add(new Replacer(0x00000148, "RtlUnwind2"));
			add(new Replacer(0x00000149, "RtlUpcaseUnicodeChar"));
			add(new Replacer(0x0000014A, "RtlUpperChar"));
			add(new Replacer(0x0000014B, "RtlVirtualUnwind"));
			add(new Replacer(0x0000014C, "_vscprintf"));
			add(new Replacer(0x0000014D, "_vsnprintf"));
			add(new Replacer(0x0000014E, "vsprintf"));
			add(new Replacer(0x0000014F, "_vscwprintf"));
			add(new Replacer(0x00000150, "_vsnwprintf"));
			add(new Replacer(0x00000151, "_vswprintf"));
			add(new Replacer(0x00000152, "KeTlsAlloc"));
			add(new Replacer(0x00000153, "KeTlsFree"));
			add(new Replacer(0x00000154, "KeTlsGetValue"));
			add(new Replacer(0x00000155, "KeTlsSetValue"));
			add(new Replacer(0x00000156, "XboxHardwareInfo"));
			add(new Replacer(0x00000157, "XboxKrnlBaseVersion"));
			add(new Replacer(0x00000158, "XboxKrnlVersion"));
			add(new Replacer(0x00000159, "XeCryptAesKey"));
			add(new Replacer(0x0000015A, "XeCryptAesEcb"));
			add(new Replacer(0x0000015B, "XeCryptAesCbc"));
			add(new Replacer(0x0000015C, "XeCryptBnDwLeDhEqualBase"));
			add(new Replacer(0x0000015D, "XeCryptBnDwLeDhInvalBase"));
			add(new Replacer(0x0000015E, "XeCryptBnDwLeDhModExp"));
			add(new Replacer(0x0000015F, "XeCryptBnDw_Copy"));
			add(new Replacer(0x00000160, "XeCryptBnDw_SwapLeBe"));
			add(new Replacer(0x00000161, "XeCryptBnDw_Zero"));
			add(new Replacer(0x00000162, "XeCryptBnDwLePkcs1Format"));
			add(new Replacer(0x00000163, "XeCryptBnDwLePkcs1Verify"));
			add(new Replacer(0x00000164, "XeCryptBnQwBeSigCreate"));
			add(new Replacer(0x00000165, "XeCryptBnQwBeSigFormat"));
			add(new Replacer(0x00000166, "XeCryptBnQwBeSigVerify"));
			add(new Replacer(0x00000167, "XeCryptBnQwNeModExp"));
			add(new Replacer(0x00000168, "XeCryptBnQwNeModExpRoot"));
			add(new Replacer(0x00000169, "XeCryptBnQwNeModInv"));
			add(new Replacer(0x0000016A, "XeCryptBnQwNeModMul"));
			add(new Replacer(0x0000016B, "XeCryptBnQwNeRsaKeyGen"));
			add(new Replacer(0x0000016C, "XeCryptBnQwNeRsaPrvCrypt"));
			add(new Replacer(0x0000016D, "XeCryptBnQwNeRsaPubCrypt"));
			add(new Replacer(0x0000016E, "XeCryptBnQw_Copy"));
			add(new Replacer(0x0000016F, "XeCryptBnQw_SwapDwQw"));
			add(new Replacer(0x00000170, "XeCryptBnQw_SwapDwQwLeBe"));
			add(new Replacer(0x00000171, "XeCryptBnQw_SwapLeBe"));
			add(new Replacer(0x00000172, "XeCryptBnQw_Zero"));
			add(new Replacer(0x00000173, "XeCryptChainAndSumMac"));
			add(new Replacer(0x00000174, "XeCryptDesParity"));
			add(new Replacer(0x00000175, "XeCryptDesKey"));
			add(new Replacer(0x00000176, "XeCryptDesEcb"));
			add(new Replacer(0x00000177, "XeCryptDesCbc"));
			add(new Replacer(0x00000178, "XeCryptDes3Key"));
			add(new Replacer(0x00000179, "XeCryptDes3Ecb"));
			add(new Replacer(0x0000017A, "XeCryptDes3Cbc"));
			add(new Replacer(0x0000017B, "XeCryptHmacMd5Init"));
			add(new Replacer(0x0000017C, "XeCryptHmacMd5Update"));
			add(new Replacer(0x0000017D, "XeCryptHmacMd5Final"));
			add(new Replacer(0x0000017E, "XeCryptHmacMd5"));
			add(new Replacer(0x0000017F, "XeCryptHmacShaInit"));
			add(new Replacer(0x00000180, "XeCryptHmacShaUpdate"));
			add(new Replacer(0x00000181, "XeCryptHmacShaFinal"));
			add(new Replacer(0x00000182, "XeCryptHmacSha"));
			add(new Replacer(0x00000183, "XeCryptHmacShaVerify"));
			add(new Replacer(0x00000184, "XeCryptMd5Init"));
			add(new Replacer(0x00000185, "XeCryptMd5Update"));
			add(new Replacer(0x00000186, "XeCryptMd5Final"));
			add(new Replacer(0x00000187, "XeCryptMd5"));
			add(new Replacer(0x00000188, "XeCryptParveEcb"));
			add(new Replacer(0x00000189, "XeCryptParveCbcMac"));
			add(new Replacer(0x0000018A, "XeCryptRandom"));
			add(new Replacer(0x0000018B, "XeCryptRc4Key"));
			add(new Replacer(0x0000018C, "XeCryptRc4Ecb"));
			add(new Replacer(0x0000018D, "XeCryptRc4"));
			add(new Replacer(0x0000018E, "XeCryptRotSumSha"));
			add(new Replacer(0x0000018F, "XeCryptShaInit"));
			add(new Replacer(0x00000190, "XeCryptShaUpdate"));
			add(new Replacer(0x00000191, "XeCryptShaFinal"));
			add(new Replacer(0x00000192, "XeCryptSha"));
			add(new Replacer(0x00000193, "XexExecutableModuleHandle"));
			add(new Replacer(0x00000194, "XexCheckExecutablePrivilege"));
			add(new Replacer(0x00000195, "XexGetModuleHandle"));
			add(new Replacer(0x00000196, "XexGetModuleSection"));
			add(new Replacer(0x00000197, "XexGetProcedureAddress"));
			add(new Replacer(0x00000198, "XexLoadExecutable"));
			add(new Replacer(0x00000199, "XexLoadImage"));
			add(new Replacer(0x0000019A, "XexLoadImageFromMemory"));
			add(new Replacer(0x0000019B, "XexLoadImageHeaders"));
			add(new Replacer(0x0000019C, "XexPcToFileHeader"));
			add(new Replacer(0x0000019D, "KiApcNormalRoutineNop"));
			add(new Replacer(0x0000019E, "XexRegisterPatchDescriptor"));
			add(new Replacer(0x0000019F, "XexSendDeferredNotifications"));
			add(new Replacer(0x000001A0, "XexStartExecutable"));
			add(new Replacer(0x000001A1, "XexUnloadImage"));
			add(new Replacer(0x000001A2, "XexUnloadImageAndExitThread"));
			add(new Replacer(0x000001A3, "XexUnloadTitleModules"));
			add(new Replacer(0x000001A4, "XexVerifyImageHeaders"));
			add(new Replacer(0x000001A5, "__C_specific_handler"));
			add(new Replacer(0x000001A6, "DbgLoadImageSymbols"));
			add(new Replacer(0x000001A7, "DbgUnLoadImageSymbols"));
			add(new Replacer(0x000001A8, "RtlImageDirectoryEntryToData"));
			add(new Replacer(0x000001A9, "RtlImageNtHeader"));
			add(new Replacer(0x000001AA, "ExDebugMonitorService"));
			add(new Replacer(0x000001AB, "MmDbgReadCheck"));
			add(new Replacer(0x000001AC, "MmDbgReleaseAddress"));
			add(new Replacer(0x000001AD, "MmDbgWriteCheck"));
			add(new Replacer(0x000001AE, "ExLoadedCommandLine"));
			add(new Replacer(0x000001AF, "ExLoadedImageName"));
			add(new Replacer(0x000001B0, "VdBlockUntilGUIIdle"));
			add(new Replacer(0x000001B1, "VdCallGraphicsNotificationRoutines"));
			add(new Replacer(0x000001B2, "VdDisplayFatalError"));
			add(new Replacer(0x000001B3, "VdEnableClosedCaption"));
			add(new Replacer(0x000001B4, "VdEnableDisableClockGating"));
			add(new Replacer(0x000001B5, "VdEnableDisablePowerSavingMode"));
			add(new Replacer(0x000001B6, "VdEnableRingBufferRPtrWriteBack"));
			add(new Replacer(0x000001B7, "VdGenerateGPUCSCCoefficients"));
			add(new Replacer(0x000001B8, "VdGetClosedCaptionReadyStatus"));
			add(new Replacer(0x000001B9, "VdGetCurrentDisplayGamma"));
			add(new Replacer(0x000001BA, "VdGetCurrentDisplayInformation"));
			add(new Replacer(0x000001BB, "VdGetDisplayModeOverride"));
			add(new Replacer(0x000001BC, "VdGetGraphicsAsicID"));
			add(new Replacer(0x000001BD, "VdGetSystemCommandBuffer"));
			add(new Replacer(0x000001BE, "VdGlobalDevice"));
			add(new Replacer(0x000001BF, "VdGlobalXamDevice"));
			add(new Replacer(0x000001C0, "VdGpuClockInMHz"));
			add(new Replacer(0x000001C1, "VdHSIOCalibrationLock"));
			add(new Replacer(0x000001C2, "VdInitializeEngines"));
			add(new Replacer(0x000001C3, "VdInitializeRingBuffer"));
			add(new Replacer(0x000001C4, "VdInitializeScaler"));
			add(new Replacer(0x000001C5, "VdInitializeScalerCommandBuffer"));
			add(new Replacer(0x000001C6, "VdIsHSIOTrainingSucceeded"));
			add(new Replacer(0x000001C7, "VdPersistDisplay"));
			add(new Replacer(0x000001C8, "VdQuerySystemCommandBuffer"));
			add(new Replacer(0x000001C9, "VdQueryVideoFlags"));
			add(new Replacer(0x000001CA, "VdQueryVideoMode"));
			add(new Replacer(0x000001CB, "VdReadDVERegisterUlong"));
			add(new Replacer(0x000001CC, "VdReadWriteHSIOCalibrationFlag"));
			add(new Replacer(0x000001CD, "VdRegisterGraphicsNotification"));
			add(new Replacer(0x000001CE, "VdRegisterXamGraphicsNotification"));
			add(new Replacer(0x000001CF, "VdSendClosedCaptionData"));
			add(new Replacer(0x000001D0, "VdSetCGMSOption"));
			add(new Replacer(0x000001D1, "VdSetColorProfileAdjustment"));
			add(new Replacer(0x000001D2, "VdSetCscMatricesOverride"));
			add(new Replacer(0x000001D3, "VdSetDisplayMode"));
			add(new Replacer(0x000001D4, "VdSetDisplayModeOverride"));
			add(new Replacer(0x000001D5, "VdSetGraphicsInterruptCallback"));
			add(new Replacer(0x000001D6, "VdSetHDCPOption"));
			add(new Replacer(0x000001D7, "VdSetMacrovisionOption"));
			add(new Replacer(0x000001D8, "VdSetSystemCommandBuffer"));
			add(new Replacer(0x000001D9, "VdSetSystemCommandBufferGpuIdentifierAddress"));
			add(new Replacer(0x000001DA, "VdSetWSSData"));
			add(new Replacer(0x000001DB, "VdSetWSSOption"));
			add(new Replacer(0x000001DC, "VdShutdownEngines"));
			add(new Replacer(0x000001DD, "VdTurnDisplayOff"));
			add(new Replacer(0x000001DE, "VdTurnDisplayOn"));
			add(new Replacer(0x000001DF, "KiApcNormalRoutineNop"));
			add(new Replacer(0x000001E0, "VdWriteDVERegisterUlong"));
			add(new Replacer(0x000001E1, "XVoicedHeadsetPresent"));
			add(new Replacer(0x000001E2, "XVoicedSubmitPacket"));
			add(new Replacer(0x000001E3, "XVoicedClose"));
			add(new Replacer(0x000001E4, "XVoicedActivate"));
			add(new Replacer(0x000001E5, "XInputdGetCapabilities"));
			add(new Replacer(0x000001E6, "XInputdReadState"));
			add(new Replacer(0x000001E7, "XInputdWriteState"));
			add(new Replacer(0x000001E8, "XInputdNotify"));
			add(new Replacer(0x000001E9, "XInputdRawState"));
			add(new Replacer(0x000001EA, "HidGetCapabilities"));
			add(new Replacer(0x000001EB, "HidReadKeys"));
			add(new Replacer(0x000001EC, "XInputdGetDeviceStats"));
			add(new Replacer(0x000001ED, "XInputdResetDevice"));
			add(new Replacer(0x000001EE, "XInputdSetRingOfLight"));
			add(new Replacer(0x000001EF, "XInputdSetRFPowerMode"));
			add(new Replacer(0x000001F0, "XInputdSetRadioFrequency"));
			add(new Replacer(0x000001F1, "HidGetLastInputTime"));
			add(new Replacer(0x000001F2, "XAudioRenderDriverInitialize"));
			add(new Replacer(0x000001F3, "XAudioRegisterRenderDriverClient"));
			add(new Replacer(0x000001F4, "XAudioUnregisterRenderDriverClient"));
			add(new Replacer(0x000001F5, "XAudioSubmitRenderDriverFrame"));
			add(new Replacer(0x000001F6, "XAudioRenderDriverLock"));
			add(new Replacer(0x000001F7, "XAudioGetVoiceCategoryVolumeChangeMask"));
			add(new Replacer(0x000001F8, "XAudioGetVoiceCategoryVolume"));
			add(new Replacer(0x000001F9, "XAudioSetVoiceCategoryVolume"));
			add(new Replacer(0x000001FA, "XAudioBeginDigitalBypassMode"));
			add(new Replacer(0x000001FB, "XAudioEndDigitalBypassMode"));
			add(new Replacer(0x000001FC, "XAudioSubmitDigitalPacket"));
			add(new Replacer(0x000001FD, "XAudioQueryDriverPerformance"));
			add(new Replacer(0x000001FE, "XAudioGetRenderDriverThread"));
			add(new Replacer(0x000001FF, "XAudioGetSpeakerConfig"));
			add(new Replacer(0x00000200, "XAudioSetSpeakerConfig"));
			add(new Replacer(0x00000201, "NicSetUnicastAddress"));
			add(new Replacer(0x00000202, "NicAttach"));
			add(new Replacer(0x00000203, "NicDetach"));
			add(new Replacer(0x00000204, "NicXmit"));
			add(new Replacer(0x00000205, "NicUpdateMcastMembership"));
			add(new Replacer(0x00000206, "NicFlushXmitQueue"));
			add(new Replacer(0x00000207, "NicShutdown"));
			add(new Replacer(0x00000208, "NicGetLinkState"));
			add(new Replacer(0x00000209, "NicGetStats"));
			add(new Replacer(0x0000020A, "NicGetOpt"));
			add(new Replacer(0x0000020B, "NicSetOpt"));
			add(new Replacer(0x0000020C, "DrvSetSysReqCallback"));
			add(new Replacer(0x0000020D, "DrvSetUserBindingCallback"));
			add(new Replacer(0x0000020E, "DrvSetContentStorageCallback"));
			add(new Replacer(0x0000020F, "DrvSetAutobind"));
			add(new Replacer(0x00000210, "DrvGetContentStorageNotification"));
			add(new Replacer(0x00000211, "MtpdBeginTransaction"));
			add(new Replacer(0x00000212, "MtpdCancelTransaction"));
			add(new Replacer(0x00000213, "MtpdEndTransaction"));
			add(new Replacer(0x00000214, "MtpdGetCurrentDevices"));
			add(new Replacer(0x00000215, "MtpdReadData"));
			add(new Replacer(0x00000216, "MtpdReadEvent"));
			add(new Replacer(0x00000217, "MtpdResetDevice"));
			add(new Replacer(0x00000218, "MtpdSendData"));
			add(new Replacer(0x00000219, "MtpdVerifyProximity"));
			add(new Replacer(0x0000021A, "XUsbcamSetCaptureMode"));
			add(new Replacer(0x0000021B, "XUsbcamGetConfig"));
			add(new Replacer(0x0000021C, "XUsbcamSetConfig"));
			add(new Replacer(0x0000021D, "XUsbcamGetState"));
			add(new Replacer(0x0000021E, "XUsbcamReadFrame"));
			add(new Replacer(0x0000021F, "XUsbcamSnapshot"));
			add(new Replacer(0x00000220, "XUsbcamSetView"));
			add(new Replacer(0x00000221, "XUsbcamGetView"));
			add(new Replacer(0x00000222, "XUsbcamCreate"));
			add(new Replacer(0x00000223, "XUsbcamDestroy"));
			add(new Replacer(0x00000224, "XMACreateContext"));
			add(new Replacer(0x00000225, "XMAInitializeContext"));
			add(new Replacer(0x00000226, "XMAReleaseContext"));
			add(new Replacer(0x00000227, "XMAEnableContext"));
			add(new Replacer(0x00000228, "XMADisableContext"));
			add(new Replacer(0x00000229, "XMAGetOutputBufferWriteOffset"));
			add(new Replacer(0x0000022A, "XMASetOutputBufferReadOffset"));
			add(new Replacer(0x0000022B, "XMAGetOutputBufferReadOffset"));
			add(new Replacer(0x0000022C, "XMASetOutputBufferValid"));
			add(new Replacer(0x0000022D, "XMAIsOutputBufferValid"));
			add(new Replacer(0x0000022E, "XMASetInputBuffer0Valid"));
			add(new Replacer(0x0000022F, "XMAIsInputBuffer0Valid"));
			add(new Replacer(0x00000230, "XMASetInputBuffer1Valid"));
			add(new Replacer(0x00000231, "XMAIsInputBuffer1Valid"));
			add(new Replacer(0x00000232, "XMASetInputBuffer0"));
			add(new Replacer(0x00000233, "XMASetInputBuffer1"));
			add(new Replacer(0x00000234, "XMAGetPacketMetadata"));
			add(new Replacer(0x00000235, "XMABlockWhileInUse"));
			add(new Replacer(0x00000236, "XMASetLoopData"));
			add(new Replacer(0x00000237, "XMASetInputBufferReadOffset"));
			add(new Replacer(0x00000238, "XMAGetInputBufferReadOffset"));
			add(new Replacer(0x00000239, "ExIsBetaFeatureEnabled"));
			add(new Replacer(0x0000023A, "XeKeysGetFactoryChallenge"));
			add(new Replacer(0x0000023B, "XeKeysSetFactoryResponse"));
			add(new Replacer(0x0000023C, "XeKeysInitializeFuses"));
			add(new Replacer(0x0000023D, "XeKeysSaveBootLoader"));
			add(new Replacer(0x0000023E, "XeKeysSaveKeyVault"));
			add(new Replacer(0x0000023F, "XeKeysGetStatus"));
			add(new Replacer(0x00000240, "XeKeysGeneratePrivateKey"));
			add(new Replacer(0x00000241, "XeKeysGetKeyProperties"));
			add(new Replacer(0x00000242, "XeKeysSetKey"));
			add(new Replacer(0x00000243, "XeKeysGenerateRandomKey"));
			add(new Replacer(0x00000244, "XeKeysGetKey"));
			add(new Replacer(0x00000245, "XeKeysGetDigest"));
			add(new Replacer(0x00000246, "XeKeysGetConsoleID"));
			add(new Replacer(0x00000247, "XeKeysGetConsoleType"));
			add(new Replacer(0x00000248, "XeKeysQwNeRsaPrvCrypt"));
			add(new Replacer(0x00000249, "XeKeysHmacSha"));
			add(new Replacer(0x0000024A, "XInputdPassThroughRFCommand"));
			add(new Replacer(0x0000024B, "XeKeysAesCbc"));
			add(new Replacer(0x0000024C, "XeKeysDes2Cbc"));
			add(new Replacer(0x0000024D, "XeKeysDesCbc"));
			add(new Replacer(0x0000024E, "XeKeysObscureKey"));
			add(new Replacer(0x0000024F, "XeKeysHmacShaUsingKey"));
			add(new Replacer(0x00000250, "XeKeysSaveBootLoaderEx"));
			add(new Replacer(0x00000251, "XeKeysAesCbcUsingKey"));
			add(new Replacer(0x00000252, "XeKeysDes2CbcUsingKey"));
			add(new Replacer(0x00000253, "XeKeysDesCbcUsingKey"));
			add(new Replacer(0x00000254, "XeKeysObfuscate"));
			add(new Replacer(0x00000255, "XeKeysUnObfuscate"));
			add(new Replacer(0x00000256, "XeKeysConsolePrivateKeySign"));
			add(new Replacer(0x00000257, "XeKeysConsoleSignatureVerification"));
			add(new Replacer(0x00000258, "XeKeysVerifyRSASignature"));
			add(new Replacer(0x00000259, "StfsCreateDevice"));
			add(new Replacer(0x0000025A, "StfsControlDevice"));
			add(new Replacer(0x0000025B, "VdSwap"));
			add(new Replacer(0x0000025C, "HalFsbInterruptCount"));
			add(new Replacer(0x0000025D, "XeKeysSaveSystemUpdate"));
			add(new Replacer(0x0000025E, "XeKeysLockSystemUpdate"));
			add(new Replacer(0x0000025F, "XeKeysExecute"));
			add(new Replacer(0x00000260, "XeKeysGetVersions"));
			add(new Replacer(0x00000261, "XInputdPowerDownDevice"));
			add(new Replacer(0x00000262, "AniBlockOnAnimation"));
			add(new Replacer(0x00000263, "AniTerminateAnimation"));
			add(new Replacer(0x00000264, "XUsbcamReset"));
			add(new Replacer(0x00000265, "AniSetLogo"));
			add(new Replacer(0x00000266, "KeCertMonitorData"));
			add(new Replacer(0x00000267, "HalIsExecutingPowerDownDpc"));
			add(new Replacer(0x00000268, "VdInitializeEDRAM"));
			add(new Replacer(0x00000269, "VdRetrainEDRAM"));
			add(new Replacer(0x0000026A, "VdRetrainEDRAMWorker"));
			add(new Replacer(0x0000026B, "VdHSIOTrainCount"));
			add(new Replacer(0x0000026C, "HalGetPowerUpCause"));
			add(new Replacer(0x0000026D, "VdHSIOTrainingStatus"));
			add(new Replacer(0x0000026E, "RgcBindInfo"));
			add(new Replacer(0x0000026F, "VdReadEEDIDBlock"));
			add(new Replacer(0x00000270, "VdEnumerateVideoModes"));
			add(new Replacer(0x00000271, "VdEnableHDCP"));
			add(new Replacer(0x00000272, "VdRegisterHDCPNotification"));
			add(new Replacer(0x00000273, "HidReadMouseChanges"));
			add(new Replacer(0x00000274, "DumpSetCollectionFacility"));
			add(new Replacer(0x00000275, "XexTransformImageKey"));
			add(new Replacer(0x00000276, "XAudioOverrideSpeakerConfig"));
			add(new Replacer(0x00000277, "XInputdReadTextKeystroke"));
			add(new Replacer(0x00000278, "DrvXenonButtonPressed"));
			add(new Replacer(0x00000279, "DrvBindToUser"));
			add(new Replacer(0x0000027A, "XexGetModuleImportVersions"));
			add(new Replacer(0x0000027B, "RtlComputeCrc32"));
			add(new Replacer(0x0000027C, "XeKeysSetRevocationList"));
			add(new Replacer(0x0000027D, "HalRegisterPowerDownCallback"));
			add(new Replacer(0x0000027E, "VdGetDisplayDiscoveryData"));
			add(new Replacer(0x0000027F, "XInputdSendStayAliveRequest"));
			add(new Replacer(0x00000280, "XVoicedSendVPort"));
			add(new Replacer(0x00000281, "XVoicedGetBatteryStatus"));
			add(new Replacer(0x00000282, "XInputdFFGetDeviceInfo"));
			add(new Replacer(0x00000283, "XInputdFFSetEffect"));
			add(new Replacer(0x00000284, "XInputdFFUpdateEffect"));
			add(new Replacer(0x00000285, "XInputdFFEffectOperation"));
			add(new Replacer(0x00000286, "XInputdFFDeviceControl"));
			add(new Replacer(0x00000287, "XInputdFFSetDeviceGain"));
			add(new Replacer(0x00000288, "XInputdFFCancelIo"));
			add(new Replacer(0x00000289, "XInputdFFSetRumble"));
			add(new Replacer(0x0000028A, "NtAllocateEncryptedMemory"));
			add(new Replacer(0x0000028B, "NtFreeEncryptedMemory"));
			add(new Replacer(0x0000028C, "XeKeysExSaveKeyVault"));
			add(new Replacer(0x0000028D, "XeKeysExSetKey"));
			add(new Replacer(0x0000028E, "XeKeysExGetKey"));
			add(new Replacer(0x0000028F, "DrvSetDeviceConfigChangeCallback"));
			add(new Replacer(0x00000290, "DrvDeviceConfigChange"));
			add(new Replacer(0x00000291, "HalRegisterHdDvdRomNotification"));
			add(new Replacer(0x00000292, "XeKeysSecurityInitialize"));
			add(new Replacer(0x00000293, "XeKeysSecurityLoadSettings"));
			add(new Replacer(0x00000294, "XeKeysSecuritySaveSettings"));
			add(new Replacer(0x00000295, "XeKeysSecuritySetDetected"));
			add(new Replacer(0x00000296, "XeKeysSecurityGetDetected"));
			add(new Replacer(0x00000297, "XeKeysSecuritySetActivated"));
			add(new Replacer(0x00000298, "XeKeysSecurityGetActivated"));
			add(new Replacer(0x00000299, "XeKeysDvdAuthAP25InstallTable"));
			add(new Replacer(0x0000029A, "XeKeysDvdAuthAP25GetTableVersion"));
			add(new Replacer(0x0000029B, "XeKeysGetProtectedFlag"));
			add(new Replacer(0x0000029C, "XeKeysSetProtectedFlag"));
			add(new Replacer(0x0000029D, "KeEnablePFMInterrupt"));
			add(new Replacer(0x0000029E, "KeDisablePFMInterrupt"));
			add(new Replacer(0x0000029F, "KeSetProfilerISR"));
			add(new Replacer(0x000002A0, "VdStartDisplayDiscovery"));
			add(new Replacer(0x000002A1, "VdSetHDCPRevocationList"));
			add(new Replacer(0x000002A2, "XeKeysGetUpdateSequence"));
			add(new Replacer(0x000002A3, "XeKeysDvdAuthExActivate"));
			add(new Replacer(0x000002A4, "KeGetImagePageTableEntry"));
			add(new Replacer(0x000002A5, "HalRegisterBackgroundModeTransitionCallback"));
			add(new Replacer(0x000002A6, "AniStartBootAnimation"));
			add(new Replacer(0x000002A7, "HalClampUnclampOutputDACs"));
			add(new Replacer(0x000002A8, "HalPowerDownToBackgroundMode"));
			add(new Replacer(0x000002A9, "HalNotifyAddRemoveBackgroundTask"));
			add(new Replacer(0x000002AA, "HalCallBackgroundModeNotificationRoutines"));
			add(new Replacer(0x000002AB, "HalFsbResetCount"));
			add(new Replacer(0x000002AC, "HalGetMemoryInformation"));
			add(new Replacer(0x000002AD, "XInputdGetLastTextInputTime"));
			add(new Replacer(0x000002AE, "VdEnableWMAProOverHDMI"));
			add(new Replacer(0x000002AF, "XeKeysRevokeSaveSettings"));
			add(new Replacer(0x000002B0, "XInputdSetTextMessengerIndicator"));
			add(new Replacer(0x000002B1, "MicDeviceRequest"));
			add(new Replacer(0x000002B2, "XeKeysGetMediaID"));
			add(new Replacer(0x000002B3, "XeKeysLoadKeyVault"));
			add(new Replacer(0x000002B4, "KeGetVidInfo"));
			add(new Replacer(0x000002B5, "HalNotifyBackgroundModeTransitionComplete"));
			add(new Replacer(0x000002B6, "IoAcquireCancelSpinLock"));
			add(new Replacer(0x000002B7, "IoReleaseCancelSpinLock"));
			add(new Replacer(0x000002B8, "NtCancelIoFile"));
			add(new Replacer(0x000002B9, "NtCancelIoFileEx"));
			add(new Replacer(0x000002BA, "HalFinalizePowerLossRecovery"));
			add(new Replacer(0x000002BB, "HalSetPowerLossRecovery"));
			add(new Replacer(0x000002BC, "ExReadModifyWriteXConfigSettingUlong"));
			add(new Replacer(0x000002BD, "HalRegisterXamPowerDownCallback"));
			add(new Replacer(0x000002BE, "ExCancelAlarm"));
			add(new Replacer(0x000002BF, "ExInitializeAlarm"));
			add(new Replacer(0x000002C0, "ExSetAlarm"));
			add(new Replacer(0x000002C1, "XexActivationGetNonce"));
			add(new Replacer(0x000002C2, "XexActivationSetLicense"));
			add(new Replacer(0x000002C3, "IptvSetBoundaryKey"));
			add(new Replacer(0x000002C4, "IptvSetSessionKey"));
			add(new Replacer(0x000002C5, "IptvVerifyOmac1Signature"));
			add(new Replacer(0x000002C6, "IptvGetAesCtrTransform"));
			add(new Replacer(0x000002C7, "SataCdRomRecordReset"));
			add(new Replacer(0x000002C8, "XInputdSetTextDeviceKeyLocks"));
			add(new Replacer(0x000002C9, "XInputdGetTextDeviceKeyLocks"));
			add(new Replacer(0x000002CA, "XexActivationVerifyOwnership"));
			add(new Replacer(0x000002CB, "XexDisableVerboseDbgPrint"));
			add(new Replacer(0x000002CC, "SvodCreateDevice"));
			add(new Replacer(0x000002CD, "RtlCaptureStackBackTrace"));
			add(new Replacer(0x000002CE, "XeKeysRevokeUpdateDynamic"));
			add(new Replacer(0x000002CF, "XexImportTraceEnable"));
			add(new Replacer(0x000002D0, "ExRegisterXConfigNotification"));
			add(new Replacer(0x000002D1, "XeKeysSecuritySetStat"));
			add(new Replacer(0x000002D2, "VdQueryRealVideoMode"));
			add(new Replacer(0x000002D3, "XexSetExecutablePrivilege"));
			add(new Replacer(0x000002D4, "XAudioSuspendRenderDriverClients"));
			add(new Replacer(0x000002D5, "IptvGetSessionKeyHash"));
			add(new Replacer(0x000002D6, "VdSetCGMSState"));
			add(new Replacer(0x000002D7, "VdSetSCMSState"));
			add(new Replacer(0x000002D8, "KeFlushMultipleTb"));
			add(new Replacer(0x000002D9, "VdGetOption"));
			add(new Replacer(0x000002DA, "VdSetOption"));
			add(new Replacer(0x000002DB, "UsbdBootEnumerationDoneEvent"));
			add(new Replacer(0x000002DC, "StfsDeviceErrorEvent"));
			add(new Replacer(0x000002DD, "ExTryToAcquireReadWriteLockExclusive"));
			add(new Replacer(0x000002DE, "ExTryToAcquireReadWriteLockShared"));
			add(new Replacer(0x000002DF, "XexSetLastKdcTime"));
			add(new Replacer(0x000002E0, "XInputdControl"));
			add(new Replacer(0x000002E1, "RmcDeviceRequest"));
			add(new Replacer(0x000002E2, "LDIResetDecompression"));
			add(new Replacer(0x000002E3, "NicRegisterDevice"));
			add(new Replacer(0x000002E4, "UsbdAddDeviceComplete"));
			add(new Replacer(0x000002E5, "UsbdCancelAsyncTransfer"));
			add(new Replacer(0x000002E6, "UsbdGetDeviceSpeed"));
			add(new Replacer(0x000002E7, "UsbdGetDeviceTopology"));
			add(new Replacer(0x000002E8, "UsbdGetEndpointDescriptor"));
			add(new Replacer(0x000002E9, "UsbdIsDeviceAuthenticated"));
			add(new Replacer(0x000002EA, "UsbdOpenDefaultEndpoint"));
			add(new Replacer(0x000002EB, "UsbdOpenEndpoint"));
			add(new Replacer(0x000002EC, "UsbdQueueAsyncTransfer"));
			add(new Replacer(0x000002ED, "UsbdQueueCloseDefaultEndpoint"));
			add(new Replacer(0x000002EE, "UsbdQueueCloseEndpoint"));
			add(new Replacer(0x000002EF, "UsbdRemoveDeviceComplete"));
			add(new Replacer(0x000002F0, "KeRemoveQueueApc"));
			add(new Replacer(0x000002F1, "UsbdDriverLoadRequiredEvent"));
			add(new Replacer(0x000002F2, "UsbdGetRequiredDrivers"));
			add(new Replacer(0x000002F3, "UsbdRegisterDriverObject"));
			add(new Replacer(0x000002F4, "UsbdUnregisterDriverObject"));
			add(new Replacer(0x000002F5, "UsbdCallAndBlockOnDpcRoutine"));
			add(new Replacer(0x000002F6, "UsbdResetDevice"));
			add(new Replacer(0x000002F7, "UsbdGetDeviceDescriptor"));
			add(new Replacer(0x000002F8, "NomnilGetExtension"));
			add(new Replacer(0x000002F9, "NomnilStartCloseDevice"));
			add(new Replacer(0x000002FA, "WifiBeginAuthentication"));
			add(new Replacer(0x000002FB, "WifiCheckCounterMeasures"));
			add(new Replacer(0x000002FC, "WifiChooseAuthenCipherSetFromBSSID"));
			add(new Replacer(0x000002FD, "WifiCompleteAuthentication"));
			add(new Replacer(0x000002FE, "WifiGetAssociationIE"));
			add(new Replacer(0x000002FF, "WifiOnMICError"));
			add(new Replacer(0x00000300, "WifiPrepareAuthenticationContext"));
			add(new Replacer(0x00000301, "WifiRecvEAPOLPacket"));
			add(new Replacer(0x00000302, "WifiDeduceNetworkType"));
			add(new Replacer(0x00000303, "NicUnregisterDevice"));
			add(new Replacer(0x00000304, "DumpXitThread"));
			add(new Replacer(0x00000305, "XInputdSetWifiChannel"));
			add(new Replacer(0x00000306, "NomnilSetLed"));
			add(new Replacer(0x00000307, "WifiCalculateRegulatoryDomain"));
			add(new Replacer(0x00000308, "WifiSelectAdHocChannel"));
			add(new Replacer(0x00000309, "WifiChannelToFrequency"));
			add(new Replacer(0x0000030A, "MmGetPoolPagesType"));
			add(new Replacer(0x0000030B, "ExExpansionInstall"));
			add(new Replacer(0x0000030C, "ExExpansionCall"));
			add(new Replacer(0x0000030D, "PsCamDeviceRequest"));
			add(new Replacer(0x0000030E, "McaDeviceRequest"));
			add(new Replacer(0x0000030F, "DetroitDeviceRequest"));
			add(new Replacer(0x00000310, "XeCryptSha256Init"));
			add(new Replacer(0x00000311, "XeCryptSha256Update"));
			add(new Replacer(0x00000312, "XeCryptSha256Final"));
			add(new Replacer(0x00000313, "XeCryptSha256"));
			add(new Replacer(0x00000314, "XeCryptSha384Init"));
			add(new Replacer(0x00000315, "XeCryptSha384Update"));
			add(new Replacer(0x00000316, "XInputdGetDevicePid"));
			add(new Replacer(0x00000317, "HalGetNotedArgonErrors"));
			add(new Replacer(0x00000318, "XeCryptSha384Final"));
			add(new Replacer(0x00000319, "HalReadArgonEeprom"));
			add(new Replacer(0x0000031A, "HalWriteArgonEeprom"));
			add(new Replacer(0x0000031B, "XeKeysFcrtLoad"));
			add(new Replacer(0x0000031C, "XeKeysFcrtSave"));
			add(new Replacer(0x0000031D, "XeKeysFcrtSet"));
			add(new Replacer(0x0000031E, "XeCryptSha384"));
			add(new Replacer(0x0000031F, "XeCryptSha512Init"));
			add(new Replacer(0x00000320, "XAudioRegisterRenderDriverMECClient"));
			add(new Replacer(0x00000321, "XAudioUnregisterRenderDriverMECClient"));
			add(new Replacer(0x00000322, "XAudioCaptureRenderDriverFrame"));
			add(new Replacer(0x00000323, "XeCryptSha512Update"));
			add(new Replacer(0x00000324, "XeCryptSha512Final"));
			add(new Replacer(0x00000325, "XeCryptSha512"));
			add(new Replacer(0x00000326, "XeCryptBnQwNeCompare"));
			add(new Replacer(0x00000327, "XVoicedGetDirectionalData"));
			add(new Replacer(0x00000328, "DrvSetMicArrayStartCallback"));
			add(new Replacer(0x00000329, "DevAuthGetStatistics"));
			add(new Replacer(0x0000032A, "NullCableRequest"));
			add(new Replacer(0x0000032B, "XeKeysRevokeIsDeviceRevoked"));
			add(new Replacer(0x0000032C, "DumpUpdateDumpSettings"));
			add(new Replacer(0x0000032D, "EtxConsumerDisableEventType"));
			add(new Replacer(0x0000032E, "EtxConsumerEnableEventType"));
			add(new Replacer(0x0000032F, "EtxConsumerProcessLogs"));
			add(new Replacer(0x00000330, "EtxConsumerRegister"));
			add(new Replacer(0x00000331, "EtxConsumerUnregister"));
			add(new Replacer(0x00000332, "EtxProducerLog"));
			add(new Replacer(0x00000333, "EtxProducerLogV"));
			add(new Replacer(0x00000334, "EtxProducerRegister"));
			add(new Replacer(0x00000335, "EtxProducerUnregister"));
			add(new Replacer(0x00000336, "EtxConsumerFlushBuffers"));
			add(new Replacer(0x00000337, "EtxProducerLogXwpp"));
			add(new Replacer(0x00000338, "EtxProducerLogXwppV"));
			add(new Replacer(0x00000339, "UsbdEnableDisableRootHubPort"));
			add(new Replacer(0x0000033A, "EtxBufferRegister"));
			add(new Replacer(0x0000033B, "EtxBufferUnregister"));
			add(new Replacer(0x0000033C, "DumpRegisterDedicatedDataBlock"));
			add(new Replacer(0x0000033D, "XeKeysDvdAuthExSave"));
			add(new Replacer(0x0000033E, "XeKeysDvdAuthExInstall"));
			add(new Replacer(0x0000033F, "XexShimDisable"));
			add(new Replacer(0x00000340, "XexShimEnable"));
			add(new Replacer(0x00000341, "XexShimEntryDisable"));
			add(new Replacer(0x00000342, "XexShimEntryEnable"));
			add(new Replacer(0x00000343, "XexShimEntryRegister"));
			add(new Replacer(0x00000344, "XexShimLock"));
			add(new Replacer(0x00000345, "XboxKrnlVersion4Digit"));
			add(new Replacer(0x00000346, "XeKeysObfuscateEx"));
			add(new Replacer(0x00000347, "XeKeysUnObfuscateEx"));
			add(new Replacer(0x00000348, "XexTitleHash"));
			add(new Replacer(0x00000349, "XexTitleHashClose"));
			add(new Replacer(0x0000034A, "XexTitleHashContinue"));
			add(new Replacer(0x0000034B, "XexTitleHashOpen"));
			add(new Replacer(0x0000034C, "XAudioGetRenderDriverTic"));
			add(new Replacer(0x0000034D, "XAudioEnableDucker"));
			add(new Replacer(0x0000034E, "XAudioSetDuckerLevel"));
			add(new Replacer(0x0000034F, "XAudioIsDuckerEnabled"));
			add(new Replacer(0x00000350, "XAudioGetDuckerLevel"));
			add(new Replacer(0x00000351, "XAudioGetDuckerThreshold"));
			add(new Replacer(0x00000352, "XAudioSetDuckerThreshold"));
			add(new Replacer(0x00000353, "XAudioGetDuckerAttackTime"));
			add(new Replacer(0x00000354, "XAudioSetDuckerAttackTime"));
			add(new Replacer(0x00000355, "XAudioGetDuckerReleaseTime"));
			add(new Replacer(0x00000356, "XAudioSetDuckerReleaseTime"));
			add(new Replacer(0x00000357, "XAudioGetDuckerHoldTime"));
			add(new Replacer(0x00000358, "XAudioSetDuckerHoldTime"));
			add(new Replacer(0x00000359, "DevAuthShouldAlwaysEnforce"));
			add(new Replacer(0x0000035A, "XAudioGetUnderrunCount"));
			add(new Replacer(0x0000035C, "XVoicedIsActiveProcess"));
		}
	};
	
	public static String Rename(String module, int ordinal)
	{
		String result = "";
		String name = module.toLowerCase();
		if(name.contains("."))
			name = name.split("\\.")[0];
		switch(name)
		{
			case "createprofile":
				result += Rename(ordinal, createprofile_replacer);				
				break;
			case "connectx":
				result += Rename(ordinal, connectx_replacer);
				break;
			case "syscall":
				result += Rename(ordinal, syscall_replacer);
				break;
			case "vk":
				result += Rename(ordinal, vk_replacer);				
				break;	
			case "xam":
				result += Rename(ordinal, xam_replacer);
				break;				
			case "xapi":
				result += Rename(ordinal, xapi_replacer);
				break;
			case "xbdm":
				result += Rename(ordinal, xbdm_replacer);
				break;				
			case "xboxkrnl":
				result += Rename(ordinal, xboxkrnl_replacer);
				break;
			default:
				result += module + "_ord_" + ordinal;
				break;
		}
		if(result.isEmpty())
			result += module + "_ord_" + ordinal;
		return result;
	}
	
	public static String Rename(int ordinal, ArrayList<Replacer> list)
	{
		String result = "";
		for(Replacer r : list)
			if(r.ordinal == ordinal)
				return r.name;
		return result;
	}
}
